{"version":3,"sources":["webpack:///src/app/pages/user/profile/profile.component.html","webpack:///src/app/pages/user/profile/profile-routing.module.ts","webpack:///src/app/pages/user/profile/profile.component.ts","webpack:///node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js","webpack:///src/app/pages/user/profile/profile.module.ts"],"names":["ProfileComponent","ProfileRoutingModule","routes","path","component","editProfile","editProfileIcon","editAbout","editAboutIcon","rowsOnPage","filterQuery","sortBy","sortOrder","this","opacity","transform","data","breadcrumb","icon","breadcrumb_caption","status","forChild","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","toDelete","existing","filter","fn","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","v","encodeURIComponent","replace","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","map","rawParams","codec","param","eqIdx","decodeKey","decodeValue","val","list","isArray","res","eKey","encodeKey","encodeValue","join","idx","splice","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","params","toString","urlWithParams","qIdx","JSON","stringify","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","statusText","ok","HttpHeaderResponse","super","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","NoopInterceptor","HttpXhrBackend","BrowserXhr","ProfileModule","HttpClientModule","HttpClientXsrfModule","HttpInterceptingHandler","HttpXsrfInterceptor","HttpXsrfCookieExtractor","handler","first","req","events$","of","pipe","concatMap","handle","res$","event","request","callbackParam","append","ɵfac","t","ɵprov","token","factory","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","InjectionToken","XSSI_PREFIX","XhrFactory","XMLHttpRequest","xhrFactory","Observable","observer","xhr","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","getAllResponseHeaders","responseURL","test","getResponseHeader","onLoad","response","responseText","originalBody","parse","text","complete","onError","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","addEventListener","upload","send","Sent","removeEventListener","readyState","DONE","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","DOCUMENT","PLATFORM_ID","tokenService","headerName","lcUrl","startsWith","getToken","backend","injector","chain","interceptors","reduceRight","ngModule","providers","provide","useClass","useValue","ɵmod","ɵinj","useExisting","multi","imports","withOptions","CommonModule"],"mappings":"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","file":"x","sourcesContent":["<!--profile cover start-->\n<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <div class=\"cover-profile\">\n      <div class=\"profile-bg-img\">\n        <img class=\"profile-bg-img img-fluid\" src=\"assets/images/user-profile/bg-img1.jpg\" alt=\"bg-img\">\n        <div class=\"card-body user-info\">\n          <div class=\"col-md-12\">\n            <div class=\"media-left\">\n              <a href=\"javascript:;\" class=\"profile-image\">\n                <img class=\"user-img img-radius\" src=\"assets/images/user-profile/user-img.jpg\" alt=\"user-img\">\n              </a>\n            </div>\n            <div class=\"media-body row\">\n              <div class=\"col-lg-12\">\n                <div class=\"user-title\">\n                  <h2>Josephin Villa</h2>\n                  <span class=\"text-white\">Web designer</span>\n                </div>\n              </div>\n              <div>\n                <div class=\"pull-right cover-btn\">\n                  <button type=\"button\" class=\"btn btn-primary m-b-10 m-r-10\"><i class=\"icofont icofont-plus\"></i> Follow</button>\n                  <button type=\"button\" class=\"btn btn-primary m-b-10\"><i class=\"icofont icofont-ui-messaging\"></i> Message</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<!--profile cover end-->\n<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <div class=\"md-tabs\">\n      <ngb-tabset>\n        <ngb-tab title=\"Personal Info\">\n          <ng-template ngbTabContent>\n            <div [@fadeInOutTranslate] class=\"m-t-15\">\n              <!-- personal card start -->\n              <div class=\"card\">\n                <div class=\"card-header\">\n                  <h5 class=\"card-header-text\">About Me</h5>\n                  <button id=\"edit-btn\" type=\"button\" class=\"btn btn-sm btn-primary waves-effect waves-light f-right\" (click)=\"toggleEditProfile()\">\n                    <i class=\"icofont {{ editProfileIcon }}\"></i>\n                  </button>\n                </div>\n                <div class=\"card-body\">\n                  <div class=\"view-info\" *ngIf=\"editProfile\">\n                    <div class=\"row\">\n                      <div class=\"col-lg-12\">\n                        <div class=\"general-info\">\n                          <div class=\"row\">\n                            <div class=\"col-lg-12 col-xl-6\">\n                              <div class=\"table-responsive\">\n                                <table class=\"table m-0\">\n                                  <tbody>\n                                  <tr>\n                                    <th scope=\"row\">Full Name</th>\n                                    <td>Josephine Villa</td>\n                                  </tr>\n                                  <tr>\n                                    <th scope=\"row\">Gender</th>\n                                    <td>Female</td>\n                                  </tr>\n                                  <tr>\n                                    <th scope=\"row\">Birth Date</th>\n                                    <td>October 25th, 1990</td>\n                                  </tr>\n                                  <tr>\n                                    <th scope=\"row\">Marital Status</th>\n                                    <td>Single</td>\n                                  </tr>\n                                  <tr>\n                                    <th scope=\"row\">Location</th>\n                                    <td>New York, USA</td>\n                                  </tr>\n                                  </tbody>\n                                </table>\n                              </div>\n                            </div>\n                            <!-- end of table col-lg-6 -->\n                            <div class=\"col-lg-12 col-xl-6\">\n                              <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                  <tbody>\n                                  <tr>\n                                    <th scope=\"row\">Email</th>\n                                    <td><a href=\"javascript:;\">Demo@phenix.com</a></td>\n                                  </tr>\n                                  <tr>\n                                    <th scope=\"row\">Mobile Number</th>\n                                    <td>(0123) - 4567891</td>\n                                  </tr>\n                                  <tr>\n                                    <th scope=\"row\">Twitter</th>\n                                    <td>@codedthemes</td>\n                                  </tr>\n                                  <tr>\n                                    <th scope=\"row\">Skype</th>\n                                    <td>codedthemes.demo</td>\n                                  </tr>\n                                  <tr>\n                                    <th scope=\"row\">Website</th>\n                                    <td><a href=\"javascript:;\">www.demo.com</a></td>\n                                  </tr>\n                                  </tbody>\n                                </table>\n                              </div>\n                            </div>\n                            <!-- end of table col-lg-6 -->\n                          </div>\n                          <!-- end of row -->\n                        </div>\n                        <!-- end of general info -->\n                      </div>\n                      <!-- end of col-lg-12 -->\n                    </div>\n                    <!-- end of row -->\n                  </div>\n                  <!-- end of view-info -->\n                  <div class=\"edit-info\" *ngIf=\"!editProfile\">\n                    <div class=\"row\">\n                      <div class=\"col-lg-12\">\n                        <div class=\"general-info\">\n                          <div class=\"row\">\n                            <div class=\"col-lg-6\">\n                              <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                  <tbody>\n                                  <tr>\n                                    <td>\n                                      <div class=\"input-group\">\n                                        <span class=\"input-group-prepend\"><label class=\"input-group-text\"><i class=\"icofont icofont-user\"></i></label></span>\n                                        <input type=\"text\" class=\"form-control\" placeholder=\"Full Name\" value=\"Josephine Villa\">\n                                      </div>\n                                    </td>\n                                  </tr>\n                                  <tr>\n                                    <td>\n                                      <div class=\"form-radio\">\n                                        <div class=\"group-add-on\">\n                                          <div class=\"radio radiofill radio-inline\">\n                                            <label>\n                                              <input type=\"radio\" name=\"radio\"><i class=\"helper\"></i> Male\n                                            </label>\n                                          </div>\n                                          <div class=\"radio radiofill radio-inline\">\n                                            <label>\n                                              <input type=\"radio\" name=\"radio\" checked><i class=\"helper\"></i> Female\n                                            </label>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    </td>\n                                  </tr>\n                                  <tr>\n                                    <td>\n                                      <input id=\"dropper-default\" class=\"form-control\" type=\"text\" value=\"October 25th, 1990\" placeholder=\"Select Your Birth Date\" />\n                                    </td>\n                                  </tr>\n                                  <tr>\n                                    <td>\n                                      <select id=\"hello-single\" class=\"form-control\">\n                                        <option value=\"\">---- Marital Status ----</option>\n                                        <option value=\"married\">Married</option>\n                                        <option value=\"single\" selected>Single</option>\n                                        <option value=\"unmarried\">Unmarried</option>\n                                      </select>\n                                    </td>\n                                  </tr>\n                                  <tr>\n                                    <td>\n                                      <div class=\"input-group\">\n                                        <span class=\"input-group-prepend\"><label class=\"input-group-text\"><i class=\"icofont icofont-location-pin\"></i></label></span>\n                                        <input type=\"text\" class=\"form-control\" placeholder=\"Address\" value=\"New York, USA\">\n                                      </div>\n                                    </td>\n                                  </tr>\n                                  </tbody>\n                                </table>\n                              </div>\n                            </div>\n                            <!-- end of table col-lg-6 -->\n                            <div class=\"col-lg-6\">\n                              <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                  <tbody>\n                                  <tr>\n                                    <td>\n                                      <div class=\"input-group\">\n                                        <span class=\"input-group-prepend\"><label class=\"input-group-text\"><i class=\"icofont icofont-mobile-phone\"></i></label></span>\n                                        <input type=\"text\" class=\"form-control\" value=\"(0123) - 4567891\" placeholder=\"Mobile Number\">\n                                      </div>\n                                    </td>\n                                  </tr>\n                                  <tr>\n                                    <td>\n                                      <div class=\"input-group\">\n                                        <span class=\"input-group-prepend\"><label class=\"input-group-text\"><i class=\"icofont icofont-social-twitter\"></i></label></span>\n                                        <input type=\"text\" class=\"form-control\" value=\"@codedthemes\" placeholder=\"Twitter Id\">\n                                      </div>\n                                    </td>\n                                  </tr>\n                                  <tr>\n                                    <td>\n                                      <div class=\"input-group\">\n                                        <span class=\"input-group-prepend\"><label class=\"input-group-text\"><i class=\"icofont icofont-social-skype\"></i></label></span>\n                                        <input type=\"email\" class=\"form-control\" value=\"codedthemes.demo\" placeholder=\"Skype Id\">\n                                      </div>\n                                    </td>\n                                  </tr>\n                                  <tr>\n                                    <td>\n                                      <div class=\"input-group\">\n                                        <span class=\"input-group-prepend\"><label class=\"input-group-text\"><i class=\"icofont icofont-earth\"></i></label></span>\n                                        <input type=\"text\" class=\"form-control\" value=\"www.demo.com\" placeholder=\"website\">\n                                      </div>\n                                    </td>\n                                  </tr>\n                                  </tbody>\n                                </table>\n                              </div>\n                            </div>\n                            <!-- end of table col-lg-6 -->\n                          </div>\n                          <!-- end of row -->\n                          <div class=\"text-center\">\n                            <a href=\"javascript:;\" class=\"btn btn-primary waves-effect waves-light m-r-20\">Save</a>\n                            <a href=\"javascript:;\" id=\"edit-cancel\" class=\"btn btn-default waves-effect\" (click)=\"toggleEditProfile()\">Cancel</a>\n                          </div>\n                        </div>\n                        <!-- end of edit info -->\n                      </div>\n                      <!-- end of col-lg-12 -->\n                    </div>\n                    <!-- end of row -->\n                  </div>\n                  <!-- end of edit-info -->\n                </div>\n                <!-- end of card-body -->\n              </div>\n              <!-- personal card end-->\n            </div>\n          </ng-template>\n        </ngb-tab>\n        <ngb-tab title=\"User's Services\">\n          <ng-template ngbTabContent>\n            <div [@fadeInOutTranslate] class=\"m-t-15\">\n              <!-- info card start -->\n              <div class=\"card\">\n                <div class=\"card-header\">\n                  <h5 class=\"card-header-text\">User Services</h5>\n                </div>\n                <div class=\"card-body\">\n                  <div class=\"row\">\n                    <div class=\"col-md-6\">\n                      <div class=\"card b-l-success business-info services m-b-20\">\n                        <div ngbDropdown class=\"card-header\">\n                          <div class=\"service-header\">\n                            <a href=\"javascript:;\"><h5 class=\"card-header-text\">Shivani Hero</h5></a>\n                          </div>\n                          <span ngbDropdownToggle class=\"dropdown-toggle addon-btn text-muted f-right service-btn\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\" role=\"tooltip\">\n                                         </span>\n                          <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right b-none services-list\">\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-edit\"></i> Edit</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-ui-delete\"></i> Delete</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-eye-alt\"></i> View</a>\n                          </div>\n                        </div>\n                        <div class=\"card-body\">\n                          <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                              <p class=\"task-detail\">Lorem ipsum dolor sit amet, consectet ur adipisicing elit, sed do eiusmod temp or incidi dunt ut labore et.Lorem ipsum dolor sit amet, consecte.</p>\n                            </div>\n                            <!-- end of col-sm-8 -->\n                          </div>\n                          <!-- end of row -->\n                        </div>\n                        <!-- end of card-body -->\n                      </div>\n                    </div>\n                    <div class=\"col-md-6\">\n                      <div class=\"card b-l-danger business-info services\">\n                        <div ngbDropdown class=\"card-header\">\n                          <div class=\"service-header\">\n                            <a href=\"javascript:;\"><h5 class=\"card-header-text\">Dress and Sarees</h5></a>\n                          </div>\n                          <span ngbDropdownToggle class=\"dropdown-toggle addon-btn text-muted f-right service-btn\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\" role=\"tooltip\">\n                                         </span>\n                          <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right b-none services-list\">\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-edit\"></i> Edit</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-ui-delete\"></i> Delete</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-eye-alt\"></i> View</a>\n                          </div>\n                        </div>\n                        <div class=\"card-body\">\n                          <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                              <p class=\"task-detail\">Lorem ipsum dolor sit amet, consectet ur adipisicing elit, sed do eiusmod temp or incidi dunt ut labore et.Lorem ipsum dolor sit amet, consecte.</p>\n                            </div>\n                            <!-- end of col-sm-8 -->\n                          </div>\n                          <!-- end of row -->\n                        </div>\n                        <!-- end of card-body -->\n                      </div>\n                    </div>\n                    <div class=\"col-md-6\">\n                      <div class=\"card b-l-info business-info services\">\n                        <div ngbDropdown class=\"card-header\">\n                          <div class=\"service-header\">\n                            <a href=\"javascript:;\"><h5 class=\"card-header-text\">Shivani Auto Port</h5></a>\n                          </div>\n                          <span ngbDropdownToggle class=\"dropdown-toggle addon-btn text-muted f-right service-btn\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\" role=\"tooltip\">\n                                         </span>\n                          <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right b-none services-list\">\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-edit\"></i> Edit</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-ui-delete\"></i> Delete</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-eye-alt\"></i> View</a>\n                          </div>\n                        </div>\n                        <div class=\"card-body\">\n                          <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                              <p class=\"task-detail\">Lorem ipsum dolor sit amet, consectet ur adipisicing elit, sed do eiusmod temp or incidi dunt ut labore et.Lorem ipsum dolor sit amet, consecte.</p>\n                            </div>\n                            <!-- end of col-sm-8 -->\n                          </div>\n                          <!-- end of row -->\n                        </div>\n                        <!-- end of card-body -->\n                      </div>\n                    </div>\n                    <div class=\"col-md-6\">\n                      <div class=\"card b-l-warning business-info services\">\n                        <div ngbDropdown class=\"card-header\">\n                          <div class=\"service-header\">\n                            <a href=\"javascript:;\"><h5 class=\"card-header-text\">Hair stylist</h5></a>\n                          </div>\n                          <span ngbDropdownToggle class=\"dropdown-toggle addon-btn text-muted f-right service-btn\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\" role=\"tooltip\">\n                                         </span>\n                          <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right b-none services-list\">\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-edit\"></i> Edit</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-ui-delete\"></i> Delete</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-eye-alt\"></i> View</a>\n                          </div>\n                        </div>\n                        <div class=\"card-body\">\n                          <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                              <p class=\"task-detail\">Lorem ipsum dolor sit amet, consectet ur adipisicing elit, sed do eiusmod temp or incidi dunt ut labore et.Lorem ipsum dolor sit amet, consecte.</p>\n                            </div>\n                            <!-- end of col-sm-8 -->\n                          </div>\n                          <!-- end of row -->\n                        </div>\n                        <!-- end of card-body -->\n                      </div>\n                    </div>\n                    <div class=\"col-md-6\">\n                      <div class=\"card b-l-danger business-info services\">\n                        <div ngbDropdown class=\"card-header\">\n                          <div class=\"service-header\">\n                            <a href=\"javascript:;\"><h5 class=\"card-header-text\">BMW India</h5></a>\n                          </div>\n                          <span ngbDropdownToggle class=\"dropdown-toggle addon-btn text-muted f-right service-btn\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\" role=\"tooltip\">\n                                         </span>\n                          <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right b-none services-list\">\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-edit\"></i> Edit</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-ui-delete\"></i> Delete</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-eye-alt\"></i> View</a>\n                          </div>\n                        </div>\n                        <div class=\"card-body\">\n                          <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                              <p class=\"task-detail\">Lorem ipsum dolor sit amet, consectet ur adipisicing elit, sed do eiusmod temp or incidi dunt ut labore et.Lorem ipsum dolor sit amet, consecte.</p>\n                            </div>\n                            <!-- end of col-sm-8 -->\n                          </div>\n                          <!-- end of row -->\n                        </div>\n                        <!-- end of card-body -->\n                      </div>\n                    </div>\n                    <div class=\"col-md-6\">\n                      <div class=\"card b-l-success business-info services\">\n                        <div ngbDropdown class=\"card-header\">\n                          <div class=\"service-header\">\n                            <a href=\"javascript:;\"><h5 class=\"card-header-text\">Shivani Hero</h5></a>\n                          </div>\n                          <span ngbDropdownToggle class=\"dropdown-toggle addon-btn text-muted f-right service-btn\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\" role=\"tooltip\">\n                                         </span>\n                          <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right b-none services-list\">\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-edit\"></i> Edit</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-ui-delete\"></i> Delete</a>\n                            <a class=\"dropdown-item\" href=\"javascript:;\"><i class=\"icofont icofont-eye-alt\"></i> View</a>\n                          </div>\n                        </div>\n                        <div class=\"card-body\">\n                          <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                              <p class=\"task-detail\">Lorem ipsum dolor sit amet, consectet ur adipisicing elit, sed do eiusmod temp or incidi dunt ut labore et.Lorem ipsum dolor sit amet, consecte.</p>\n                            </div>\n                            <!-- end of col-sm-8 -->\n                          </div>\n                          <!-- end of row -->\n                        </div>\n                        <!-- end of card-body -->\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <!-- info card end -->\n            </div>\n          </ng-template>\n        </ngb-tab>\n        <ngb-tab title=\"Reviews\">\n          <ng-template ngbTabContent>\n            <div [@fadeInOutTranslate] class=\"m-t-15\">\n              <div class=\"card\">\n                <div class=\"card-header\">\n                  <h5 class=\"card-header-text\">Review</h5>\n                </div>\n                <div class=\"card-body\">\n                  <ul class=\"media-list\">\n                    <li class=\"media\">\n                      <div class=\"media-left\">\n                        <a href=\"javascript:;\">\n                          <img class=\"media-object img-radius comment-img\" src=\"assets/images/avatar-1.jpg\" alt=\"Generic placeholder image\">\n                        </a>\n                      </div>\n                      <div class=\"media-body\">\n                        <h6 class=\"media-heading\">Sortino media<span class=\"f-12 text-muted m-l-5\">Just now</span></h6>\n                        <div class=\"stars-example-css review-star\">\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                        </div>\n                        <p class=\"m-b-0\">Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis.</p>\n                        <div class=\"m-b-25\">\n                          <span><a href=\"javascript:;\" class=\"m-r-10 f-12\">Reply</a></span><span><a href=\"javascript:;\" class=\"f-12\">Edit</a> </span>\n                        </div>\n                        <hr>\n                        <!-- Nested media object -->\n                        <div class=\"media mt-2\">\n                          <a class=\"media-left\" href=\"javascript:;\">\n                            <img class=\"media-object img-radius comment-img\" src=\"assets/images/avatar-2.jpg\" alt=\"Generic placeholder image\">\n                          </a>\n                          <div class=\"media-body\">\n                            <h6 class=\"media-heading\">Larry heading <span class=\"f-12 text-muted m-l-5\">Just now</span></h6>\n                            <div class=\"stars-example-css review-star\">\n                              <i class=\"icofont icofont-star\"></i>\n                              <i class=\"icofont icofont-star\"></i>\n                              <i class=\"icofont icofont-star\"></i>\n                              <i class=\"icofont icofont-star\"></i>\n                              <i class=\"icofont icofont-star\"></i>\n                            </div>\n                            <p class=\"m-b-0\"> Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis.</p>\n                            <div class=\"m-b-25\">\n                              <span><a href=\"javascript:;\" class=\"m-r-10 f-12\">Reply</a></span><span><a href=\"javascript:;\" class=\"f-12\">Edit</a> </span>\n                            </div>\n                            <hr>\n\n                          </div>\n                        </div>\n\n                      </div>\n                    </li>\n                    <!-- Nested media object -->\n                    <div class=\"media mt-2\">\n                      <div class=\"media-left\">\n                        <a href=\"javascript:;\">\n                          <img class=\"media-object img-radius comment-img\" src=\"assets/images/avatar-1.jpg\" alt=\"Generic placeholder image\">\n                        </a>\n                      </div>\n                      <div class=\"media-body\">\n                        <h6 class=\"media-heading\">Cedric Kelly<span class=\"f-12 text-muted m-l-5\">Just now</span></h6>\n                        <div class=\"stars-example-css review-star\">\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                        </div>\n                        <p class=\"m-b-0\">Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis.</p>\n                        <div class=\"m-b-25\">\n                          <span><a href=\"javascript:;\" class=\"m-r-10 f-12\">Reply</a></span><span><a href=\"javascript:;\" class=\"f-12\">Edit</a> </span>\n                        </div>\n                        <hr>\n                      </div>\n                    </div>\n                    <div class=\"media mt-2\">\n                      <a class=\"media-left\" href=\"javascript:;\">\n                        <img class=\"media-object img-radius comment-img\" src=\"assets/images/avatar-4.jpg\" alt=\"Generic placeholder image\">\n                      </a>\n                      <div class=\"media-body\">\n                        <h6 class=\"media-heading\">Larry heading <span class=\"f-12 text-muted m-l-5\">Just now</span></h6>\n                        <div class=\"stars-example-css review-star\">\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                        </div>\n                        <p class=\"m-b-0\"> Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis.</p>\n                        <div class=\"m-b-25\">\n                          <span><a href=\"javascript:;\" class=\"m-r-10 f-12\">Reply</a></span><span><a href=\"javascript:;\" class=\"f-12\">Edit</a> </span>\n                        </div>\n                        <hr>\n                        <!-- Nested media object -->\n                        <div class=\"media mt-2\">\n                          <div class=\"media-left\">\n                            <a href=\"javascript:;\">\n                              <img class=\"media-object img-radius comment-img\" src=\"assets/images/avatar-3.jpg\" alt=\"Generic placeholder image\">\n                            </a>\n                          </div>\n                          <div class=\"media-body\">\n                            <h6 class=\"media-heading\">Colleen Hurst <span class=\"f-12 text-muted m-l-5\">Just now</span></h6>\n                            <div class=\"stars-example-css review-star\">\n                              <i class=\"icofont icofont-star\"></i>\n                              <i class=\"icofont icofont-star\"></i>\n                              <i class=\"icofont icofont-star\"></i>\n                              <i class=\"icofont icofont-star\"></i>\n                              <i class=\"icofont icofont-star\"></i>\n                            </div>\n                            <p class=\"m-b-0\">Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis.</p>\n                            <div class=\"m-b-25\">\n                              <span><a href=\"javascript:;\" class=\"m-r-10 f-12\">Reply</a></span><span><a href=\"javascript:;\" class=\"f-12\">Edit</a> </span>\n                            </div>\n                          </div>\n                          <hr>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"media mt-2\">\n                      <div class=\"media-left\">\n                        <a href=\"javascript:;\">\n                          <img class=\"media-object img-radius comment-img\" src=\"assets/images/avatar-2.jpg\" alt=\"Generic placeholder image\">\n                        </a>\n                      </div>\n                      <div class=\"media-body\">\n                        <h6 class=\"media-heading\">Mark Doe<span class=\"f-12 text-muted m-l-5\">Just now</span></h6>\n                        <div class=\"stars-example-css review-star\">\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                          <i class=\"icofont icofont-star\"></i>\n                        </div>\n                        <p class=\"m-b-0\">Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis.</p>\n                        <div class=\"m-b-25\">\n                          <span><a href=\"javascript:;\" class=\"m-r-10 f-12\">Reply</a></span><span><a href=\"javascript:;\" class=\"f-12\">Edit</a> </span>\n                        </div>\n                        <hr>\n                      </div>\n                    </div>\n                  </ul>\n                  <div class=\"md-float-material d-flex\">\n                    <div class=\"md-group-add-on p-relative col-lg-12\">\n                      <div class=\"input-group input-group-button input-group-primary\">\n                        <span class=\"input-group-prepend\"><label class=\"input-group-text\"><i class=\"icofont icofont-comment\"></i></label></span>\n                        <input type=\"text\" class=\"form-control\" placeholder=\"Write Comment\">\n                        <span class=\"input-group-append\"><label class=\"input-group-text\">\n                                       <button type=\"button\" class=\"btn btn-primary\"><i class=\"icofont icofont-plus\"></i>note</button>\n                        </label></span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </ng-template>\n        </ngb-tab>\n      </ngb-tabset>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {ProfileComponent} from './profile.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProfileComponent,\n    data: {\n      breadcrumb: 'About Us',\n      icon: 'icofont-justify-all bg-c-green',\n      breadcrumb_caption: 'Lorem Ipsum Dolor Sit Amet, Consectetur Adipisicing Elit - About Us',\n      status: true\n    }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProfileRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {animate, style, transition, trigger} from '@angular/animations';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss'],\n  animations: [\n    trigger('fadeInOutTranslate', [\n      transition(':enter', [\n        style({opacity: 0}),\n        animate('400ms ease-in-out', style({opacity: 1}))\n      ]),\n      transition(':leave', [\n        style({transform: 'translate(0)'}),\n        animate('400ms ease-in-out', style({opacity: 0}))\n      ])\n    ])\n  ]\n})\nexport class ProfileComponent implements OnInit {\n  editProfile = true;\n  editProfileIcon = 'icofont-edit';\n\n  editAbout = true;\n  editAboutIcon = 'icofont-edit';\n\n  public basicContent: string;\n\n\n  public rowsOnPage = 10;\n  public filterQuery = '';\n  public sortBy = '';\n  public sortOrder = 'desc';\n  profitChartOption: any;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  toggleEditProfile() {\n    this.editProfileIcon = (this.editProfileIcon === 'icofont-close') ? 'icofont-edit' : 'icofont-close';\n    this.editProfile = !this.editProfile;\n  }\n\n  toggleEditAbout() {\n    this.editAboutIcon = (this.editAboutIcon === 'icofont-close') ? 'icofont-edit' : 'icofont-close';\n    this.editAbout = !this.editAbout;\n  }\n\n}\n","/**\n * @license Angular v11.0.0\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        const params = rawParams.split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(update.value);\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\nHttpClient.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK',\n                    url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\nJsonpClientBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\nJsonpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nclass XhrFactory {\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    build() {\n        return (new XMLHttpRequest());\n    }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\nBrowserXhr.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(XhrFactory)); };\nHttpXhrBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: XhrFactory }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nHttpInterceptingHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); }, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\nHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); }, providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        BrowserXhr,\n        { provide: XhrFactory, useExisting: BrowserXhr },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN'\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); }, providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h };\n\n//# sourceMappingURL=http.js.map","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProfileRoutingModule } from './profile-routing.module';\nimport { ProfileComponent } from './profile.component';\nimport {SharedModule} from '../../../shared/shared.module';\nimport {FormsModule} from '@angular/forms';\nimport {HttpClientModule} from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ProfileRoutingModule,\n    SharedModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  declarations: [ProfileComponent]\n})\nexport class ProfileModule { }\n"]}