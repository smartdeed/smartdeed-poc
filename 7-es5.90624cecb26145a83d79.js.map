{"version":3,"sources":["webpack:///src/app/shared/card/card-toggle.directive.ts","webpack:///src/app/shared/card/card-animation.ts","webpack:///src/app/shared/card/card.component.html","webpack:///src/app/shared/card/card.component.ts","webpack:///node_modules/@agm/core/__ivy_ngcc__/fesm2015/agm-core.js","webpack:///src/app/pages/map/google-map/google-map.component.ts","webpack:///src/app/pages/map/google-map/google-map-routing.module.ts","webpack:///src/app/pages/map/google-map/google-map.module.ts","webpack:///src/app/pages/map/google-map/google-map.component.html"],"names":["CardToggleDirective","cardToggle","overflow","height","cardClose","opacity","display","el","$event","preventDefault","this","nativeElement","classList","toggle","CardComponent","classHeader","loadCard","isCardToggled","event","fullCard","fullCardIcon","cardLoad","setTimeout","CircleManager","LayerManager","GoogleMapsAPIWrapper","MapsAPILoader","AgmCircle_1","DataLayerManager","AgmCircle","InfoWindowManager","MarkerManager","FitBoundsService","AgmInfoWindow_1","KmlLayerManager","AgmInfoWindow","_c0","ɵfac","t","ɵprov","token","factory","_loader","_zone","_map","Promise","resolve","_mapResolver","mapOptions","runOutsideAngular","load","then","map","google","maps","Map","options","m","setOptions","addToMap","Marker","InfoWindow","strokePosition","StrokePosition","Circle","Rectangle","getNativeMap","line","Polyline","setMap","polygon","Polygon","data","Data","newLayer","TransitLayer","visible","BicyclingLayer","latLng","geometry","poly","containsLocation","eventName","Observable","observer","addListener","arg","run","next","clearInstanceListeners","setCenter","getZoom","getBounds","getMapTypeId","zoom","setZoom","getCenter","panTo","x","y","panBy","padding","fitBounds","panToBounds","trigger","NgZone","_wrapper","_layers","layer","createTransitLayer","set","createBicyclingLayer","get","currentLayer","_apiWrapper","_circles","circle","createCircle","center","lat","latitude","lng","longitude","clickable","draggable","editable","fillColor","fillOpacity","radius","strokeColor","strokeOpacity","strokeWeight","zIndex","c","getRadius","setEditable","setDraggable","setVisible","setRadius","listener","e","remove","_manager","centerChange","EventEmitter","circleClick","circleDblClick","drag","dragEnd","dragStart","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","radiusChange","rightClick","_circleAddedToManager","_eventSubscriptions","addCircle","_registerEventListeners","changes","_updateCircleOptionsChanges","optionKeys","Object","keys","filter","k","_mapOptions","indexOf","forEach","currentValue","length","events","eventEmitter","push","createEventObservable","subscribe","value","emit","coords","s","unsubscribe","removeCircle","ɵdir","type","selectors","inputs","outputs","features","createDataLayer","style","d","geoJson","getDataFeatures","l","feature","index","splice","setControlPosition","controlPosition","setControls","controls","setDrawingMode","drawingMode","setStyle","reject","addGeoJson","loadGeoJson","FitBoundsAccessor","loader","_boundsChangeSampleTime$","BehaviorSubject","_includeInBounds$","bounds$","from","pipe","sample","switchMap","time","timer","includeInBounds","_generateBounds","shareReplay","bounds","LatLngBounds","b","extend","id","_createIdentifier","has","timeMs","_mapsWrapper","_markers","uiAnim","Animation","marker","setPosition","setTitle","title","setLabel","label","setIcon","iconUrl","setOpacity","setZIndex","setClickable","convertAnimation","animation","setAnimation","markerPromise","position","icon","createMarker","_markerManager","_infoWindows","infoWindow","iWindow","i","close","w","hostMarker","getNativeMarker","open","content","maxWidth","disableAutoPan","infoWindowPromise","createInfoWindow","infoWindowId","_infoWindowManager","_el","isOpen","infoWindowClose","_infoWindowAddedToManager","_id","toString","querySelector","addInfoWindow","_updateOpenState","_setInfoWindowOptions","_infoWindowOptionsInputs","deleteInfoWindow","ɵcmp","ngContentSelectors","decls","vars","consts","template","rf","ctx","encapsulation","ElementRef","KmlLayer","preserveViewport","screenOverlays","suppressInfoWindows","url","createMVCEventObservable","array","eventNames","fromEventPattern","handler","evName","previous","apply","getArray","_handler","evListeners","evListener","PolygonManager","PolylineManager_1","RectangleManager","PolylineManager","AgmMap_1","AgmMap","AgmMarker_1","AgmPolylineIcon","AgmMarker","AgmPolylinePoint_1","AgmPolylinePoint","AgmPolyline_1","AgmPolyline","LazyMapsAPILoader","AgmCoreModule_1","AgmCoreModule","GoogleMapComponent","GoogleMapRoutingModule","GoogleMapModule","_polygons","path","polygonPromise","createPolygon","geodesic","paths","setPaths","getPath","getPaths","p","agmPolygon","startWith","newArr","parentMVEvent","merge","chMVC","chMVCEvent","pathIndex","skip","retVal","subArr","toJSON","_polylines","polylinePromise","_convertPoints","_convertIcons","icons","createPolyline","setPath","agmPolyline","getMVCPath","_getPoints","point","symbolPath","SymbolPath","_getIcons","agmIcon","fixedRotation","offset","repeat","anchor","Point","anchorX","anchorY","_convertPath","rotation","scale","entries","val","key","_rectangles","rectangle","createRectangle","north","east","south","west","r","setBounds","create","_elem","_platformId","_fitBoundsService","disableDoubleClickZoom","disableDefaultUI","scrollwheel","keyboardShortcuts","styles","usePanning","scaleControl","mapTypeControl","panControl","rotateControl","fullscreenControl","mapTypeId","clickableIcons","showDefaultInfoWindow","gestureHandling","tilt","_observableSubscriptions","mapClick","mapRightClick","mapDblClick","boundsChange","mapTypeIdChange","idle","zoomChange","mapReady","tilesLoaded","isPlatformServer","container","_initMapInstance","createMap","minZoom","maxZoom","controlSize","backgroundColor","draggableCursor","draggingCursor","zoomControl","zoomControlOptions","streetViewControl","streetViewControlOptions","scaleControlOptions","mapTypeControlOptions","panControlOptions","rotateControlOptions","fullscreenControlOptions","restriction","_handleMapCenterChange","_handleMapZoomChange","_handleMapMouseEvents","_handleBoundsChange","_handleMapTypeIdChange","_handleTilesLoadedEvent","_handleIdleEvent","_fitBoundsSubscription","_updateMapOptionsChanges","_updatePosition","_mapOptionsAttributes","setMapOptions","recenter","triggerMapEvent","_fitBounds","_setCenter","newCenter","_subscribeToFitBoundsUpdates","_updateBounds","fitBoundsPadding","getBounds$","_isLatLngBoundsLiteral","newBounds","union","subscribeToMapEvent","z","name","emitter","placeId","stop","PLATFORM_ID","hostVars","hostBindings","Inject","markerId","openInfoWindow","animationChange","markerClick","markerDblClick","markerRightClick","QueryList","_markerAddedToManger","_fitBoundsDetails$","ReplaySubject","handleInfoWindowUpdate","Error","Number","addMarker","_updateFitBoundsDetails","_addEventListeners","updateMarkerPosition","updateTitle","updateLabel","updateDraggable","updateIcon","updateOpacity","updateVisible","updateZIndex","updateClickable","updateAnimation","asObservable","cs","dcs","rc","ds","de","mover","mout","anChng","deleteMarker","contentQueries","dirIndex","_t","provide","useExisting","forwardRef","positionChanged","polylineId","_polylineManager","lineClick","lineDblClick","lineDrag","lineDragEnd","lineDragStart","lineMouseDown","lineMouseMove","lineMouseOut","lineMouseOver","lineMouseUp","lineRightClick","polyPathChange","_polylineAddedToManager","_subscriptions","points","updatePolylinePoints","_init","pointSub","iconSub","iconSequences","updateIconSequences","_polylineOptionsAttributes","setPolylineOptions","addPolyline","ev","obj","os","createPathEventObservable","ob$","pathEvent","toArray","deletePolyline","WindowRef","window","DocumentRef","document","BROWSER_GLOBALS_PROVIDERS","GoogleMapsScriptProtocol","LAZY_MAPS_API_CONFIG","InjectionToken","config","localeId","super","_SCRIPT_ID","callbackName","_config","_windowRef","_documentRef","getNativeWindow","_scriptLoadingPromise","scriptOnPage","getNativeDocument","getElementById","_assignScriptLoadingPromise","script","createElement","async","defer","src","_getScriptSrc","body","appendChild","scriptElem","onerror","error","protocol","HTTPS","AUTO","HTTP","queryParams","v","apiVersion","callback","apiKey","client","clientId","channel","libraries","region","language","hostAndPath","Array","isArray","join","entry","LOCALE_ID","Optional","String","lazyMapsAPILoaderConfig","ngModule","providers","useClass","useValue","ɵmod","ɵinj","routes","component","latA","lngA","featureType","stylers","saturation","elementType","hue","visibility","breadcrumb","breadcrumb_caption","status","forChild","CommonModule","forRoot"],"mappings":"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","file":"x","sourcesContent":["import {Directive, ElementRef, HostListener} from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[appCardToggleEvent]'\r\n})\r\nexport class CardToggleDirective {\r\n    constructor(private el: ElementRef) { }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onToggle($event: any) {\r\n        $event.preventDefault();\r\n        this.el.nativeElement.classList.toggle('icon-up');\r\n    }\r\n}\r\n","import {trigger, state, style, AUTO_STYLE, transition, animate} from '@angular/animations';\r\n\r\nexport const cardToggle = trigger('cardToggle', [\r\n    state('collapsed, void',\r\n        style({\r\n            overflow: 'hidden',\r\n            height: '0px',\r\n        })\r\n    ),\r\n    state('expanded',\r\n        style({\r\n            height: AUTO_STYLE,\r\n        })\r\n    ),\r\n    transition('collapsed <=> expanded', [\r\n        animate('400ms ease-in-out')\r\n    ])\r\n]);\r\n\r\nexport const cardClose = trigger('cardClose', [\r\n    state('open', style({\r\n        opacity: 1\r\n    })),\r\n    state('closed', style({\r\n        opacity: 0,\r\n        display: 'none'\r\n    })),\r\n    transition('open <=> closed', animate( '400ms' )),\r\n]);\r\n","<div class=\"card {{ fullCard }} {{ cardLoad }}\" [@cardClose]=\"cardClose\" [ngClass]=\"cardClass\">\n  <div class=\"card-header\" *ngIf=\"title\">\n    <h5>{{ title }}</h5>\n    <span *ngIf=\"!classHeader\">{{ headerContent }}</span>\n    <span *ngIf=\"classHeader\">\n      <ng-content select=\".code-header\"></ng-content>\n    </span>\n    <div class=\"card-header-right\">\n      <ul class=\"list-unstyled card-option\">\n        <li *ngIf=\"!isCardToggled\" (click)=\"this.isCardToggled = !this.isCardToggled\"><i class=\"icofont icofont-simple-left\"></i></li>\n        <li *ngIf=\"isCardToggled\" (click)=\"this.isCardToggled = !this.isCardToggled\"><i class=\"icofont icofont-simple-right\"></i></li>\n        <li *ngIf=\"isCardToggled\"><i class=\"icofont icofont-maximize {{ fullCardIcon }} full-card\" (click)=\"fullScreen($event)\"></i></li>\n        <li *ngIf=\"isCardToggled\"><i class=\"icofont icofont-minus minimize-card\" appCardToggleEvent (click)=\"toggleCard($event)\"></i></li>\n        <li *ngIf=\"isCardToggled\"><i class=\"icofont icofont-refresh reload-card\" (click)=\"appCardRefresh($event)\" ></i></li>\n        <li *ngIf=\"isCardToggled\"><i class=\"icofont icofont-error close-card\" (click)=\"closeCard($event)\"></i></li>\n      </ul>\n    </div>\n  </div>\n\n  <div [@cardToggle]=\"cardToggle\">\n    <div class=\"card-body\" [ngClass]=\"blockClass\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n  <div class=\"card-loader\" *ngIf=\"loadCard\"><i class=\"icofont icofont-refresh rotate-refresh\"></i></div>\n</div>\n","import {Component, OnInit, Input, ViewEncapsulation} from '@angular/core';\nimport {cardToggle, cardClose} from './card-animation';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css'],\n  animations: [cardToggle, cardClose],\n  encapsulation: ViewEncapsulation.None\n})\nexport class CardComponent implements OnInit {\n  @Input() headerContent: string;\n  @Input() title: string;\n  @Input() blockClass: string;\n  @Input() cardClass: string;\n  @Input() classHeader = false;\n  cardToggle = 'expanded';\n  cardClose = 'open';\n  fullCard: string;\n  fullCardIcon: string;\n  loadCard = false;\n  isCardToggled = false;\n  cardLoad: string;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  toggleCard(event) {\n    this.cardToggle = this.cardToggle === 'collapsed' ? 'expanded' : 'collapsed';\n  }\n\n  closeCard(event) {\n    this.cardClose = this.cardClose === 'closed' ? 'open' : 'closed';\n  }\n\n  fullScreen(event) {\n    this.fullCard = this.fullCard === 'full-card' ? '' : 'full-card';\n    this.fullCardIcon = this.fullCardIcon === 'icofont-resize' ? '' : 'icofont-resize';\n  }\n\n  appCardRefresh() {\n    this.loadCard = true;\n    this.cardLoad = 'card-load';\n    setTimeout( () => {\n      this.cardLoad = '';\n      this.loadCard = false;\n    }, 3000);\n  }\n}\n","import { __decorate, __metadata, __param, __awaiter } from 'tslib';\nimport { Injectable, NgZone, Input, Directive, EventEmitter, Output, Self, ElementRef, Component, Inject, PLATFORM_ID, QueryList, ContentChildren, forwardRef, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Optional, LOCALE_ID, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject, from, timer, Subject, fromEventPattern, merge, ReplaySubject, bindCallback, of, throwError } from 'rxjs';\nimport { flatMap, sample, switchMap, map, shareReplay, distinctUntilChanged, takeUntil, startWith, skip, multicast } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"*\"];\nlet MapsAPILoader = class MapsAPILoader {\n};\nMapsAPILoader.ɵfac = function MapsAPILoader_Factory(t) { return new (t || MapsAPILoader)(); };\nMapsAPILoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MapsAPILoader, factory: function (t) { return MapsAPILoader.ɵfac(t); } });\n\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\nlet GoogleMapsAPIWrapper = class GoogleMapsAPIWrapper {\n    constructor(_loader, _zone) {\n        this._loader = _loader;\n        this._zone = _zone;\n        this._map =\n            new Promise((resolve) => { this._mapResolver = resolve; });\n    }\n    createMap(el, mapOptions) {\n        return this._zone.runOutsideAngular(() => {\n            return this._loader.load().then(() => {\n                const map = new google.maps.Map(el, mapOptions);\n                this._mapResolver(map);\n                return;\n            });\n        });\n    }\n    setMapOptions(options) {\n        return this._zone.runOutsideAngular(() => {\n            this._map.then((m) => { m.setOptions(options); });\n        });\n    }\n    /**\n     * Creates a google map marker with the map context\n     */\n    createMarker(options = {}, addToMap = true) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                if (addToMap) {\n                    options.map = map;\n                }\n                return new google.maps.Marker(options);\n            });\n        });\n    }\n    createInfoWindow(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then(() => { return new google.maps.InfoWindow(options); });\n        });\n    }\n    /**\n     * Creates a google.map.Circle for the current map.\n     */\n    createCircle(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                if (typeof options.strokePosition === 'string') {\n                    options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n                }\n                options.map = map;\n                return new google.maps.Circle(options);\n            });\n        });\n    }\n    /**\n     * Creates a google.map.Rectangle for the current map.\n     */\n    createRectangle(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                options.map = map;\n                return new google.maps.Rectangle(options);\n            });\n        });\n    }\n    createPolyline(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this.getNativeMap().then((map) => {\n                let line = new google.maps.Polyline(options);\n                line.setMap(map);\n                return line;\n            });\n        });\n    }\n    createPolygon(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this.getNativeMap().then((map) => {\n                let polygon = new google.maps.Polygon(options);\n                polygon.setMap(map);\n                return polygon;\n            });\n        });\n    }\n    /**\n     * Creates a new google.map.Data layer for the current map\n     */\n    createDataLayer(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then(m => {\n                let data = new google.maps.Data(options);\n                data.setMap(m);\n                return data;\n            });\n        });\n    }\n    /**\n     * Creates a TransitLayer instance for a map\n     * @param {TransitLayerOptions} options - used for setting layer options\n     * @returns {Promise<TransitLayer>} a new transit layer object\n     */\n    createTransitLayer(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                let newLayer = new google.maps.TransitLayer();\n                newLayer.setMap(options.visible ? map : null);\n                return newLayer;\n            });\n        });\n    }\n    /**\n     * Creates a BicyclingLayer instance for a map\n     * @param {BicyclingLayerOptions} options - used for setting layer options\n     * @returns {Promise<BicyclingLayer>} a new bicycling layer object\n     */\n    createBicyclingLayer(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                let newLayer = new google.maps.BicyclingLayer();\n                newLayer.setMap(options.visible ? map : null);\n                return newLayer;\n            });\n        });\n    }\n    /**\n     * Determines if given coordinates are insite a Polygon path.\n     */\n    containsLocation(latLng, polygon) {\n        return google.maps.geometry.poly.containsLocation(latLng, polygon);\n    }\n    subscribeToMapEvent(eventName) {\n        return new Observable((observer) => {\n            this._map.then((m) => {\n                m.addListener(eventName, (arg) => { this._zone.run(() => observer.next(arg)); });\n            });\n        });\n    }\n    clearInstanceListeners() {\n        return this._zone.runOutsideAngular(() => {\n            this._map.then((map) => {\n                google.maps.event.clearInstanceListeners(map);\n            });\n        });\n    }\n    setCenter(latLng) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.setCenter(latLng));\n        });\n    }\n    getZoom() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getZoom());\n        });\n    }\n    getBounds() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getBounds());\n        });\n    }\n    getMapTypeId() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getMapTypeId());\n        });\n    }\n    setZoom(zoom) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.setZoom(zoom));\n        });\n    }\n    getCenter() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getCenter());\n        });\n    }\n    panTo(latLng) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panTo(latLng));\n        });\n    }\n    panBy(x, y) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panBy(x, y));\n        });\n    }\n    fitBounds(latLng, padding) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.fitBounds(latLng, padding));\n        });\n    }\n    panToBounds(latLng, padding) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panToBounds(latLng, padding));\n        });\n    }\n    /**\n     * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n     */\n    getNativeMap() { return this._map; }\n    /**\n     * Triggers the given event name on the map instance.\n     */\n    triggerMapEvent(eventName) {\n        return this._map.then((m) => google.maps.event.trigger(m, eventName));\n    }\n};\nGoogleMapsAPIWrapper.ɵfac = function GoogleMapsAPIWrapper_Factory(t) { return new (t || GoogleMapsAPIWrapper)(ɵngcc0.ɵɵinject(MapsAPILoader), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nGoogleMapsAPIWrapper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GoogleMapsAPIWrapper, factory: function (t) { return GoogleMapsAPIWrapper.ɵfac(t); } });\nGoogleMapsAPIWrapper.ctorParameters = () => [\n    { type: MapsAPILoader },\n    { type: NgZone }\n];\nGoogleMapsAPIWrapper = __decorate([ __metadata(\"design:paramtypes\", [MapsAPILoader, NgZone])\n], GoogleMapsAPIWrapper);\n\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\nlet LayerManager = class LayerManager {\n    constructor(_wrapper) {\n        this._wrapper = _wrapper;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a transit layer to a map instance.\n     * @param {AgmTransitLayer} layer - a TransitLayer object\n     * @param {TransitLayerOptions} options - TransitLayerOptions options\n     * @returns void\n     */\n    addTransitLayer(layer, options) {\n        const newLayer = this._wrapper.createTransitLayer(options);\n        this._layers.set(layer, newLayer);\n    }\n    /**\n     * Adds a bicycling layer to a map instance.\n     * @param {AgmBicyclingLayer} layer - a bicycling layer object\n     * @param {BicyclingLayerOptions} options - BicyclingLayer options\n     * @returns void\n     */\n    addBicyclingLayer(layer, options) {\n        const newLayer = this._wrapper.createBicyclingLayer(options);\n        this._layers.set(layer, newLayer);\n    }\n    /**\n     * Deletes a map layer\n     * @param {AgmTransitLayer|AgmBicyclingLayer} layer - the layer to delete\n     * @returns  Promise<void>\n     */\n    deleteLayer(layer) {\n        return this._layers.get(layer).then(currentLayer => {\n            currentLayer.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n    /**\n     * Hide/Show a google map layer\n     * @param { AgmTransitLayer|AgmBicyclingLayer} layer - the layer to hide/show\n     * @param {TransitLayerOptions|BicyclingLayerOptions} options - used to set visibility of the layer\n     * @returns Promise<void>\n     */\n    toggleLayerVisibility(layer, options) {\n        return this._layers.get(layer).then(currentLayer => {\n            if (!options.visible) {\n                currentLayer.setMap(null);\n                return;\n            }\n            else {\n                return this._wrapper.getNativeMap().then((map) => {\n                    currentLayer.setMap(map);\n                });\n            }\n        });\n    }\n};\nLayerManager.ɵfac = function LayerManager_Factory(t) { return new (t || LayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper)); };\nLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LayerManager, factory: function (t) { return LayerManager.ɵfac(t); } });\nLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper }\n];\nLayerManager = __decorate([ __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper])\n], LayerManager);\n\nlet layerId = 0;\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\nlet AgmBicyclingLayer = class AgmBicyclingLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId++).toString();\n        /**\n         * Hide/show bicycling layer\n         */\n        this.visible = true;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addBicyclingLayer(this, { visible: this.visible });\n        this._addedToManager = true;\n    }\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        if (changes['visible'] != null) {\n            this._manager.toggleLayerVisibility(this, { visible: changes['visible'].currentValue });\n        }\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmBicyclingLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n};\nAgmBicyclingLayer.ɵfac = function AgmBicyclingLayer_Factory(t) { return new (t || AgmBicyclingLayer)(ɵngcc0.ɵɵdirectiveInject(LayerManager)); };\nAgmBicyclingLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmBicyclingLayer, selectors: [[\"agm-bicycling-layer\"]], inputs: { visible: \"visible\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmBicyclingLayer.ctorParameters = () => [\n    { type: LayerManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmBicyclingLayer.prototype, \"visible\", void 0);\nAgmBicyclingLayer = __decorate([ __metadata(\"design:paramtypes\", [LayerManager])\n], AgmBicyclingLayer);\n\nlet CircleManager = class CircleManager {\n    constructor(_apiWrapper, _zone) {\n        this._apiWrapper = _apiWrapper;\n        this._zone = _zone;\n        this._circles = new Map();\n    }\n    addCircle(circle) {\n        this._circles.set(circle, this._apiWrapper.createCircle({\n            center: { lat: circle.latitude, lng: circle.longitude },\n            clickable: circle.clickable,\n            draggable: circle.draggable,\n            editable: circle.editable,\n            fillColor: circle.fillColor,\n            fillOpacity: circle.fillOpacity,\n            radius: circle.radius,\n            strokeColor: circle.strokeColor,\n            strokeOpacity: circle.strokeOpacity,\n            strokePosition: circle.strokePosition,\n            strokeWeight: circle.strokeWeight,\n            visible: circle.visible,\n            zIndex: circle.zIndex,\n        }));\n    }\n    /**\n     * Removes the given circle from the map.\n     */\n    removeCircle(circle) {\n        return this._circles.get(circle).then((c) => {\n            c.setMap(null);\n            this._circles.delete(circle);\n        });\n    }\n    setOptions(circle, options) {\n        return this._circles.get(circle).then((c) => {\n            if (typeof options.strokePosition === 'string') {\n                options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n            }\n            c.setOptions(options);\n        });\n    }\n    getBounds(circle) {\n        return this._circles.get(circle).then((c) => c.getBounds());\n    }\n    getCenter(circle) {\n        return this._circles.get(circle).then((c) => c.getCenter());\n    }\n    getRadius(circle) {\n        return this._circles.get(circle).then((c) => c.getRadius());\n    }\n    setCenter(circle) {\n        return this._circles.get(circle).then((c) => { return c.setCenter({ lat: circle.latitude, lng: circle.longitude }); });\n    }\n    setEditable(circle) {\n        return this._circles.get(circle).then((c) => { return c.setEditable(circle.editable); });\n    }\n    setDraggable(circle) {\n        return this._circles.get(circle).then((c) => { return c.setDraggable(circle.draggable); });\n    }\n    setVisible(circle) {\n        return this._circles.get(circle).then((c) => { return c.setVisible(circle.visible); });\n    }\n    setRadius(circle) {\n        return this._circles.get(circle).then((c) => { return c.setRadius(circle.radius); });\n    }\n    getNativeCircle(circle) {\n        return this._circles.get(circle);\n    }\n    createEventObservable(eventName, circle) {\n        return new Observable((observer) => {\n            let listener = null;\n            this._circles.get(circle).then((c) => {\n                listener = c.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n            return () => {\n                if (listener !== null) {\n                    listener.remove();\n                }\n            };\n        });\n    }\n};\nCircleManager.ɵfac = function CircleManager_Factory(t) { return new (t || CircleManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nCircleManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CircleManager, factory: function (t) { return CircleManager.ɵfac(t); } });\nCircleManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nCircleManager = __decorate([ __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], CircleManager);\n\nvar AgmCircle_1;\nlet AgmCircle = AgmCircle_1 = class AgmCircle {\n    constructor(_manager) {\n        this._manager = _manager;\n        /**\n         * Indicates whether this Circle handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this circle over the map. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this circle by dragging the control points shown at\n         * the center and around the circumference of the circle. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * The radius in meters on the Earth's surface.\n         */\n        this.radius = 0;\n        /**\n         * The stroke position. Defaults to CENTER.\n         * This property is not supported on Internet Explorer 8 and earlier.\n         */\n        this.strokePosition = 'CENTER';\n        /**\n         * The stroke width in pixels.\n         */\n        this.strokeWeight = 0;\n        /**\n         * Whether this circle is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the circle's center is changed.\n         */\n        this.centerChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the circle.\n         */\n        this.circleClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the circle.\n         */\n        this.circleDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the circle.\n         */\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the circle.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the circle.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the circle.\n         */\n        this.mouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the circle.\n         */\n        this.mouseMove = new EventEmitter();\n        /**\n         * This event is fired on circle mouseout.\n         */\n        this.mouseOut = new EventEmitter();\n        /**\n         * This event is fired on circle mouseover.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the DOM mouseup event is fired on the circle.\n         */\n        this.mouseUp = new EventEmitter();\n        /**\n         * This event is fired when the circle's radius is changed.\n         */\n        this.radiusChange = new EventEmitter();\n        /**\n         * This event is fired when the circle is right-clicked on.\n         */\n        this.rightClick = new EventEmitter();\n        this._circleAddedToManager = false;\n        this._eventSubscriptions = [];\n    }\n    /** @internal */\n    ngOnInit() {\n        this._manager.addCircle(this);\n        this._circleAddedToManager = true;\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._circleAddedToManager) {\n            return;\n        }\n        if (changes['latitude'] || changes['longitude']) {\n            this._manager.setCenter(this);\n        }\n        if (changes['editable']) {\n            this._manager.setEditable(this);\n        }\n        if (changes['draggable']) {\n            this._manager.setDraggable(this);\n        }\n        if (changes['visible']) {\n            this._manager.setVisible(this);\n        }\n        if (changes['radius']) {\n            this._manager.setRadius(this);\n        }\n        this._updateCircleOptionsChanges(changes);\n    }\n    _updateCircleOptionsChanges(changes) {\n        let options = {};\n        let optionKeys = Object.keys(changes).filter(k => AgmCircle_1._mapOptions.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        if (optionKeys.length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _registerEventListeners() {\n        let events = new Map();\n        events.set('center_changed', this.centerChange);\n        events.set('click', this.circleClick);\n        events.set('dblclick', this.circleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragstart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('radius_changed', this.radiusChange);\n        events.set('rightclick', this.rightClick);\n        events.forEach((eventEmitter, eventName) => {\n            this._eventSubscriptions.push(this._manager.createEventObservable(eventName, this).subscribe((value) => {\n                switch (eventName) {\n                    case 'radius_changed':\n                        this._manager.getRadius(this).then((radius) => eventEmitter.emit(radius));\n                        break;\n                    case 'center_changed':\n                        this._manager.getCenter(this).then((center) => eventEmitter.emit({ lat: center.lat(), lng: center.lng() }));\n                        break;\n                    default:\n                        eventEmitter.emit({ coords: { lat: value.latLng.lat(), lng: value.latLng.lng() } });\n                }\n            }));\n        });\n    }\n    /** @internal */\n    ngOnDestroy() {\n        this._eventSubscriptions.forEach(function (s) { s.unsubscribe(); });\n        this._eventSubscriptions = null;\n        this._manager.removeCircle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Circle.\n     */\n    getBounds() { return this._manager.getBounds(this); }\n    getCenter() { return this._manager.getCenter(this); }\n};\nAgmCircle.ɵfac = function AgmCircle_Factory(t) { return new (t || AgmCircle)(ɵngcc0.ɵɵdirectiveInject(CircleManager)); };\nAgmCircle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmCircle, selectors: [[\"agm-circle\"]], inputs: { clickable: \"clickable\", draggable: [\"circleDraggable\", \"draggable\"], editable: \"editable\", radius: \"radius\", strokePosition: \"strokePosition\", strokeWeight: \"strokeWeight\", visible: \"visible\", latitude: \"latitude\", longitude: \"longitude\", fillColor: \"fillColor\", fillOpacity: \"fillOpacity\", strokeColor: \"strokeColor\", strokeOpacity: \"strokeOpacity\", zIndex: \"zIndex\" }, outputs: { centerChange: \"centerChange\", circleClick: \"circleClick\", circleDblClick: \"circleDblClick\", drag: \"drag\", dragEnd: \"dragEnd\", dragStart: \"dragStart\", mouseDown: \"mouseDown\", mouseMove: \"mouseMove\", mouseOut: \"mouseOut\", mouseOver: \"mouseOver\", mouseUp: \"mouseUp\", radiusChange: \"radiusChange\", rightClick: \"rightClick\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmCircle._mapOptions = [\n    'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\n    'visible', 'zIndex', 'clickable',\n];\nAgmCircle.ctorParameters = () => [\n    { type: CircleManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmCircle.prototype, \"latitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmCircle.prototype, \"longitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"clickable\", void 0);\n__decorate([\n    Input('circleDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"editable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmCircle.prototype, \"fillColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmCircle.prototype, \"fillOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"radius\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmCircle.prototype, \"strokeColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmCircle.prototype, \"strokeOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmCircle.prototype, \"strokePosition\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"strokeWeight\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"visible\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmCircle.prototype, \"zIndex\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"centerChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"circleClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"circleDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"drag\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"dragEnd\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"dragStart\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"mouseDown\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"mouseMove\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"mouseOut\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"mouseOver\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"mouseUp\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"radiusChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"rightClick\", void 0);\nAgmCircle = AgmCircle_1 = __decorate([ __metadata(\"design:paramtypes\", [CircleManager])\n], AgmCircle);\n\n/**\n * Manages all Data Layers for a Google Map instance.\n */\nlet DataLayerManager = class DataLayerManager {\n    constructor(_wrapper, _zone) {\n        this._wrapper = _wrapper;\n        this._zone = _zone;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a new Data Layer to the map.\n     */\n    addDataLayer(layer) {\n        const newLayer = this._wrapper.createDataLayer({\n            style: layer.style,\n        })\n            .then(d => {\n            if (layer.geoJson) {\n                this.getDataFeatures(d, layer.geoJson).then(features => d.features = features);\n            }\n            return d;\n        });\n        this._layers.set(layer, newLayer);\n    }\n    deleteDataLayer(layer) {\n        this._layers.get(layer).then(l => {\n            l.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n    updateGeoJson(layer, geoJson) {\n        this._layers.get(layer).then(l => {\n            l.forEach(function (feature) {\n                l.remove(feature);\n                var index = l.features.indexOf(feature, 0);\n                if (index > -1) {\n                    l.features.splice(index, 1);\n                }\n            });\n            this.getDataFeatures(l, geoJson).then(features => l.features = features);\n        });\n    }\n    setDataOptions(layer, options) {\n        this._layers.get(layer).then(l => {\n            l.setControlPosition(options.controlPosition);\n            l.setControls(options.controls);\n            l.setDrawingMode(options.drawingMode);\n            l.setStyle(options.style);\n        });\n    }\n    /**\n     * Creates a Google Maps event listener for the given DataLayer as an Observable\n     */\n    createEventObservable(eventName, layer) {\n        return new Observable((observer) => {\n            this._layers.get(layer).then((d) => {\n                d.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    /**\n     * Extract features from a geoJson using google.maps Data Class\n     * @param d : google.maps.Data class instance\n     * @param geoJson : url or geojson object\n     */\n    getDataFeatures(d, geoJson) {\n        return new Promise((resolve, reject) => {\n            if (typeof geoJson === 'object') {\n                try {\n                    const features = d.addGeoJson(geoJson);\n                    resolve(features);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n            else if (typeof geoJson === 'string') {\n                d.loadGeoJson(geoJson, null, resolve);\n            }\n            else {\n                reject(`Impossible to extract features from geoJson: wrong argument type`);\n            }\n        });\n    }\n};\nDataLayerManager.ɵfac = function DataLayerManager_Factory(t) { return new (t || DataLayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nDataLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DataLayerManager, factory: function (t) { return DataLayerManager.ɵfac(t); } });\nDataLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nDataLayerManager = __decorate([ __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], DataLayerManager);\n\nvar AgmDataLayer_1;\nlet layerId$1 = 0;\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\nlet AgmDataLayer = AgmDataLayer_1 = class AgmDataLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$1++).toString();\n        this._subscriptions = [];\n        /**\n         * This event is fired when a feature in the layer is clicked.\n         */\n        this.layerClick = new EventEmitter();\n        /**\n         * The geoJson to be displayed\n         */\n        this.geoJson = null;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addDataLayer(this);\n        this._addedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const listeners = [\n            { name: 'click', handler: (ev) => this.layerClick.emit(ev) },\n        ];\n        listeners.forEach((obj) => {\n            const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmDataLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteDataLayer(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(s => s.unsubscribe());\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        var geoJsonChange = changes['geoJson'];\n        if (geoJsonChange) {\n            this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n        }\n        let dataOptions = {};\n        AgmDataLayer_1._dataOptionsAttributes.forEach(k => dataOptions[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : this[k]);\n        this._manager.setDataOptions(this, dataOptions);\n    }\n};\nAgmDataLayer.ɵfac = function AgmDataLayer_Factory(t) { return new (t || AgmDataLayer)(ɵngcc0.ɵɵdirectiveInject(DataLayerManager)); };\nAgmDataLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmDataLayer, selectors: [[\"agm-data-layer\"]], inputs: { geoJson: \"geoJson\", style: \"style\" }, outputs: { layerClick: \"layerClick\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmDataLayer._dataOptionsAttributes = ['style'];\nAgmDataLayer.ctorParameters = () => [\n    { type: DataLayerManager }\n];\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmDataLayer.prototype, \"layerClick\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmDataLayer.prototype, \"geoJson\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function)\n], AgmDataLayer.prototype, \"style\", void 0);\nAgmDataLayer = AgmDataLayer_1 = __decorate([ __metadata(\"design:paramtypes\", [DataLayerManager])\n], AgmDataLayer);\n\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\nclass FitBoundsAccessor {\n}\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\nlet FitBoundsService = class FitBoundsService {\n    constructor(loader) {\n        this._boundsChangeSampleTime$ = new BehaviorSubject(200);\n        this._includeInBounds$ = new BehaviorSubject(new Map());\n        this.bounds$ = from(loader.load()).pipe(flatMap(() => this._includeInBounds$), sample(this._boundsChangeSampleTime$.pipe(switchMap(time => timer(0, time)))), map(includeInBounds => this._generateBounds(includeInBounds)), shareReplay(1));\n    }\n    _generateBounds(includeInBounds) {\n        const bounds = new google.maps.LatLngBounds();\n        includeInBounds.forEach(b => bounds.extend(b));\n        return bounds;\n    }\n    addToBounds(latLng) {\n        const id = this._createIdentifier(latLng);\n        if (this._includeInBounds$.value.has(id)) {\n            return;\n        }\n        const map = this._includeInBounds$.value;\n        map.set(id, latLng);\n        this._includeInBounds$.next(map);\n    }\n    removeFromBounds(latLng) {\n        const map = this._includeInBounds$.value;\n        map.delete(this._createIdentifier(latLng));\n        this._includeInBounds$.next(map);\n    }\n    changeFitBoundsChangeSampleTime(timeMs) {\n        this._boundsChangeSampleTime$.next(timeMs);\n    }\n    getBounds$() {\n        return this.bounds$;\n    }\n    _createIdentifier(latLng) {\n        return `${latLng.lat}+${latLng.lng}`;\n    }\n};\nFitBoundsService.ɵfac = function FitBoundsService_Factory(t) { return new (t || FitBoundsService)(ɵngcc0.ɵɵinject(MapsAPILoader)); };\nFitBoundsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FitBoundsService, factory: function (t) { return FitBoundsService.ɵfac(t); } });\nFitBoundsService.ctorParameters = () => [\n    { type: MapsAPILoader }\n];\nFitBoundsService = __decorate([ __metadata(\"design:paramtypes\", [MapsAPILoader])\n], FitBoundsService);\n\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\nlet AgmFitBounds = class AgmFitBounds {\n    constructor(_fitBoundsAccessor, _fitBoundsService) {\n        this._fitBoundsAccessor = _fitBoundsAccessor;\n        this._fitBoundsService = _fitBoundsService;\n        /**\n         * If the value is true, the element gets added to the bounds of the map.\n         * Default: true.\n         */\n        this.agmFitBounds = true;\n        this._destroyed$ = new Subject();\n        this._latestFitBoundsDetails = null;\n    }\n    /**\n     * @internal\n     */\n    ngOnChanges() {\n        this._updateBounds();\n    }\n    /**\n     * @internal\n     */\n    ngOnInit() {\n        this._fitBoundsAccessor\n            .getFitBoundsDetails$()\n            .pipe(distinctUntilChanged((x, y) => x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng), takeUntil(this._destroyed$))\n            .subscribe(details => this._updateBounds(details));\n    }\n    /*\n     Either the location changed, or visible status changed.\n     Possible state changes are\n     invisible -> visible\n     visible -> invisible\n     visible -> visible (new location)\n    */\n    _updateBounds(newFitBoundsDetails) {\n        // either visibility will change, or location, so remove the old one anyway\n        if (this._latestFitBoundsDetails) {\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n            // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n            // true -> false -> true, in which case we still need old value cached here\n        }\n        if (newFitBoundsDetails) {\n            this._latestFitBoundsDetails = newFitBoundsDetails;\n        }\n        if (!this._latestFitBoundsDetails) {\n            return;\n        }\n        if (this.agmFitBounds === true) {\n            this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n        }\n    }\n    /**\n     * @internal\n     */\n    ngOnDestroy() {\n        this._destroyed$.next();\n        this._destroyed$.complete();\n        if (this._latestFitBoundsDetails !== null) {\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n        }\n    }\n};\nAgmFitBounds.ɵfac = function AgmFitBounds_Factory(t) { return new (t || AgmFitBounds)(ɵngcc0.ɵɵdirectiveInject(FitBoundsAccessor, 2), ɵngcc0.ɵɵdirectiveInject(FitBoundsService)); };\nAgmFitBounds.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmFitBounds, selectors: [[\"\", \"agmFitBounds\", \"\"]], inputs: { agmFitBounds: \"agmFitBounds\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmFitBounds.ctorParameters = () => [\n    { type: FitBoundsAccessor, decorators: [{ type: Self }] },\n    { type: FitBoundsService }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmFitBounds.prototype, \"agmFitBounds\", void 0);\nAgmFitBounds = __decorate([ __param(0, Self()),\n    __metadata(\"design:paramtypes\", [FitBoundsAccessor,\n        FitBoundsService])\n], AgmFitBounds);\n\nlet MarkerManager = class MarkerManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._markers = new Map();\n    }\n    convertAnimation(uiAnim) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (uiAnim === null) {\n                return null;\n            }\n            else {\n                return this._mapsWrapper.getNativeMap().then(() => google.maps.Animation[uiAnim]);\n            }\n        });\n    }\n    deleteMarker(marker) {\n        const m = this._markers.get(marker);\n        if (m == null) {\n            // marker already deleted\n            return Promise.resolve();\n        }\n        return m.then((m) => {\n            return this._zone.run(() => {\n                m.setMap(null);\n                this._markers.delete(marker);\n            });\n        });\n    }\n    updateMarkerPosition(marker) {\n        return this._markers.get(marker).then((m) => m.setPosition({ lat: marker.latitude, lng: marker.longitude }));\n    }\n    updateTitle(marker) {\n        return this._markers.get(marker).then((m) => m.setTitle(marker.title));\n    }\n    updateLabel(marker) {\n        return this._markers.get(marker).then((m) => { m.setLabel(marker.label); });\n    }\n    updateDraggable(marker) {\n        return this._markers.get(marker).then((m) => m.setDraggable(marker.draggable));\n    }\n    updateIcon(marker) {\n        return this._markers.get(marker).then((m) => m.setIcon(marker.iconUrl));\n    }\n    updateOpacity(marker) {\n        return this._markers.get(marker).then((m) => m.setOpacity(marker.opacity));\n    }\n    updateVisible(marker) {\n        return this._markers.get(marker).then((m) => m.setVisible(marker.visible));\n    }\n    updateZIndex(marker) {\n        return this._markers.get(marker).then((m) => m.setZIndex(marker.zIndex));\n    }\n    updateClickable(marker) {\n        return this._markers.get(marker).then((m) => m.setClickable(marker.clickable));\n    }\n    updateAnimation(marker) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const m = yield this._markers.get(marker);\n            m.setAnimation(yield this.convertAnimation(marker.animation));\n        });\n    }\n    addMarker(marker) {\n        const markerPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n            return this._mapsWrapper.createMarker({\n                position: { lat: marker.latitude, lng: marker.longitude },\n                label: marker.label,\n                draggable: marker.draggable,\n                icon: marker.iconUrl,\n                opacity: marker.opacity,\n                visible: marker.visible,\n                zIndex: marker.zIndex,\n                title: marker.title,\n                clickable: marker.clickable,\n                animation: yield this.convertAnimation(marker.animation),\n            }).then(resolve);\n        }));\n        this._markers.set(marker, markerPromise);\n    }\n    getNativeMarker(marker) {\n        return this._markers.get(marker);\n    }\n    createEventObservable(eventName, marker) {\n        return new Observable((observer) => {\n            this._markers.get(marker).then((m) => {\n                m.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n};\nMarkerManager.ɵfac = function MarkerManager_Factory(t) { return new (t || MarkerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nMarkerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MarkerManager, factory: function (t) { return MarkerManager.ɵfac(t); } });\nMarkerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nMarkerManager = __decorate([ __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], MarkerManager);\n\nlet InfoWindowManager = class InfoWindowManager {\n    constructor(_mapsWrapper, _zone, _markerManager) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._markerManager = _markerManager;\n        this._infoWindows = new Map();\n    }\n    deleteInfoWindow(infoWindow) {\n        const iWindow = this._infoWindows.get(infoWindow);\n        if (iWindow == null) {\n            // info window already deleted\n            return Promise.resolve();\n        }\n        return iWindow.then((i) => {\n            return this._zone.run(() => {\n                i.close();\n                this._infoWindows.delete(infoWindow);\n            });\n        });\n    }\n    setPosition(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((i) => i.setPosition({\n            lat: infoWindow.latitude,\n            lng: infoWindow.longitude,\n        }));\n    }\n    setZIndex(infoWindow) {\n        return this._infoWindows.get(infoWindow)\n            .then((i) => i.setZIndex(infoWindow.zIndex));\n    }\n    open(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((w) => {\n            if (infoWindow.hostMarker != null) {\n                return this._markerManager.getNativeMarker(infoWindow.hostMarker).then((marker) => {\n                    return this._mapsWrapper.getNativeMap().then((map) => w.open(map, marker));\n                });\n            }\n            return this._mapsWrapper.getNativeMap().then((map) => w.open(map));\n        });\n    }\n    close(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((w) => w.close());\n    }\n    setOptions(infoWindow, options) {\n        return this._infoWindows.get(infoWindow).then((i) => i.setOptions(options));\n    }\n    addInfoWindow(infoWindow) {\n        const options = {\n            content: infoWindow.content,\n            maxWidth: infoWindow.maxWidth,\n            zIndex: infoWindow.zIndex,\n            disableAutoPan: infoWindow.disableAutoPan,\n        };\n        if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n            options.position = { lat: infoWindow.latitude, lng: infoWindow.longitude };\n        }\n        const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n        this._infoWindows.set(infoWindow, infoWindowPromise);\n    }\n    /**\n     * Creates a Google Maps event listener for the given InfoWindow as an Observable\n     */\n    createEventObservable(eventName, infoWindow) {\n        return new Observable((observer) => {\n            this._infoWindows.get(infoWindow).then((i) => {\n                i.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n};\nInfoWindowManager.ɵfac = function InfoWindowManager_Factory(t) { return new (t || InfoWindowManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(MarkerManager)); };\nInfoWindowManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: InfoWindowManager, factory: function (t) { return InfoWindowManager.ɵfac(t); } });\nInfoWindowManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone },\n    { type: MarkerManager }\n];\nInfoWindowManager = __decorate([ __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone,\n        MarkerManager])\n], InfoWindowManager);\n\nvar AgmInfoWindow_1;\nlet infoWindowId = 0;\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nlet AgmInfoWindow = AgmInfoWindow_1 = class AgmInfoWindow {\n    constructor(_infoWindowManager, _el) {\n        this._infoWindowManager = _infoWindowManager;\n        this._el = _el;\n        /**\n         * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n         */\n        this.isOpen = false;\n        /**\n         * Emits an event when the info window is closed.\n         */\n        this.infoWindowClose = new EventEmitter();\n        this._infoWindowAddedToManager = false;\n        this._id = (infoWindowId++).toString();\n    }\n    ngOnInit() {\n        this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n        this._infoWindowManager.addInfoWindow(this);\n        this._infoWindowAddedToManager = true;\n        this._updateOpenState();\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._infoWindowAddedToManager) {\n            return;\n        }\n        if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n            typeof this.longitude === 'number') {\n            this._infoWindowManager.setPosition(this);\n        }\n        if (changes['zIndex']) {\n            this._infoWindowManager.setZIndex(this);\n        }\n        if (changes['isOpen']) {\n            this._updateOpenState();\n        }\n        this._setInfoWindowOptions(changes);\n    }\n    _registerEventListeners() {\n        this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {\n            this.isOpen = false;\n            this.infoWindowClose.emit();\n        });\n    }\n    _updateOpenState() {\n        this.isOpen ? this.open() : this.close();\n    }\n    _setInfoWindowOptions(changes) {\n        let options = {};\n        let optionKeys = Object.keys(changes).filter(k => AgmInfoWindow_1._infoWindowOptionsInputs.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        this._infoWindowManager.setOptions(this, options);\n    }\n    /**\n     * Opens the info window.\n     */\n    open() { return this._infoWindowManager.open(this); }\n    /**\n     * Closes the info window.\n     */\n    close() {\n        return this._infoWindowManager.close(this).then(() => { this.infoWindowClose.emit(); });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return 'AgmInfoWindow-' + this._id.toString(); }\n    /** @internal */\n    ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\n};\nAgmInfoWindow.ɵfac = function AgmInfoWindow_Factory(t) { return new (t || AgmInfoWindow)(ɵngcc0.ɵɵdirectiveInject(InfoWindowManager), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nAgmInfoWindow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AgmInfoWindow, selectors: [[\"agm-info-window\"]], inputs: { isOpen: \"isOpen\", latitude: \"latitude\", longitude: \"longitude\", disableAutoPan: \"disableAutoPan\", zIndex: \"zIndex\", maxWidth: \"maxWidth\" }, outputs: { infoWindowClose: \"infoWindowClose\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"agm-info-window-content\"]], template: function AgmInfoWindow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, encapsulation: 2 });\nAgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\nAgmInfoWindow.ctorParameters = () => [\n    { type: InfoWindowManager },\n    { type: ElementRef }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmInfoWindow.prototype, \"latitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmInfoWindow.prototype, \"longitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], AgmInfoWindow.prototype, \"disableAutoPan\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmInfoWindow.prototype, \"zIndex\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmInfoWindow.prototype, \"maxWidth\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmInfoWindow.prototype, \"isOpen\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmInfoWindow.prototype, \"infoWindowClose\", void 0);\nAgmInfoWindow = AgmInfoWindow_1 = __decorate([ __metadata(\"design:paramtypes\", [InfoWindowManager, ElementRef])\n], AgmInfoWindow);\n\n/**\n * Manages all KML Layers for a Google Map instance.\n */\nlet KmlLayerManager = class KmlLayerManager {\n    constructor(_wrapper, _zone) {\n        this._wrapper = _wrapper;\n        this._zone = _zone;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a new KML Layer to the map.\n     */\n    addKmlLayer(layer) {\n        const newLayer = this._wrapper.getNativeMap().then(m => {\n            return new google.maps.KmlLayer({\n                clickable: layer.clickable,\n                map: m,\n                preserveViewport: layer.preserveViewport,\n                screenOverlays: layer.screenOverlays,\n                suppressInfoWindows: layer.suppressInfoWindows,\n                url: layer.url,\n                zIndex: layer.zIndex,\n            });\n        });\n        this._layers.set(layer, newLayer);\n    }\n    setOptions(layer, options) {\n        this._layers.get(layer).then(l => l.setOptions(options));\n    }\n    deleteKmlLayer(layer) {\n        this._layers.get(layer).then(l => {\n            l.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n    /**\n     * Creates a Google Maps event listener for the given KmlLayer as an Observable\n     */\n    createEventObservable(eventName, layer) {\n        return new Observable((observer) => {\n            this._layers.get(layer).then((m) => {\n                m.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n};\nKmlLayerManager.ɵfac = function KmlLayerManager_Factory(t) { return new (t || KmlLayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nKmlLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: KmlLayerManager, factory: function (t) { return KmlLayerManager.ɵfac(t); } });\nKmlLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nKmlLayerManager = __decorate([ __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], KmlLayerManager);\n\nvar AgmKmlLayer_1;\nlet layerId$2 = 0;\nlet AgmKmlLayer = AgmKmlLayer_1 = class AgmKmlLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$2++).toString();\n        this._subscriptions = [];\n        /**\n         * If true, the layer receives mouse events. Default value is true.\n         */\n        this.clickable = true;\n        /**\n         * By default, the input map is centered and zoomed to the bounding box of the contents of the\n         * layer.\n         * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n         * were never set.\n         */\n        this.preserveViewport = false;\n        /**\n         * Whether to render the screen overlays. Default true.\n         */\n        this.screenOverlays = true;\n        /**\n         * Suppress the rendering of info windows when layer features are clicked.\n         */\n        this.suppressInfoWindows = false;\n        /**\n         * The URL of the KML document to display.\n         */\n        this.url = null;\n        /**\n         * The z-index of the layer.\n         */\n        this.zIndex = null;\n        /**\n         * This event is fired when a feature in the layer is clicked.\n         */\n        this.layerClick = new EventEmitter();\n        /**\n         * This event is fired when the KML layers default viewport has changed.\n         */\n        this.defaultViewportChange = new EventEmitter();\n        /**\n         * This event is fired when the KML layer has finished loading.\n         * At this point it is safe to read the status property to determine if the layer loaded\n         * successfully.\n         */\n        this.statusChange = new EventEmitter();\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addKmlLayer(this);\n        this._addedToManager = true;\n        this._addEventListeners();\n    }\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        this._updatePolygonOptions(changes);\n    }\n    _updatePolygonOptions(changes) {\n        const options = Object.keys(changes)\n            .filter(k => AgmKmlLayer_1._kmlLayerOptions.indexOf(k) !== -1)\n            .reduce((obj, k) => {\n            obj[k] = changes[k].currentValue;\n            return obj;\n        }, {});\n        if (Object.keys(options).length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _addEventListeners() {\n        const listeners = [\n            { name: 'click', handler: (ev) => this.layerClick.emit(ev) },\n            { name: 'defaultviewport_changed', handler: () => this.defaultViewportChange.emit() },\n            { name: 'status_changed', handler: () => this.statusChange.emit() },\n        ];\n        listeners.forEach((obj) => {\n            const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmKmlLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteKmlLayer(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(s => s.unsubscribe());\n    }\n};\nAgmKmlLayer.ɵfac = function AgmKmlLayer_Factory(t) { return new (t || AgmKmlLayer)(ɵngcc0.ɵɵdirectiveInject(KmlLayerManager)); };\nAgmKmlLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmKmlLayer, selectors: [[\"agm-kml-layer\"]], inputs: { clickable: \"clickable\", preserveViewport: \"preserveViewport\", screenOverlays: \"screenOverlays\", suppressInfoWindows: \"suppressInfoWindows\", url: \"url\", zIndex: \"zIndex\" }, outputs: { layerClick: \"layerClick\", defaultViewportChange: \"defaultViewportChange\", statusChange: \"statusChange\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\nAgmKmlLayer.ctorParameters = () => [\n    { type: KmlLayerManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmKmlLayer.prototype, \"clickable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmKmlLayer.prototype, \"preserveViewport\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmKmlLayer.prototype, \"screenOverlays\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmKmlLayer.prototype, \"suppressInfoWindows\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmKmlLayer.prototype, \"url\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmKmlLayer.prototype, \"zIndex\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmKmlLayer.prototype, \"layerClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmKmlLayer.prototype, \"defaultViewportChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmKmlLayer.prototype, \"statusChange\", void 0);\nAgmKmlLayer = AgmKmlLayer_1 = __decorate([ __metadata(\"design:paramtypes\", [KmlLayerManager])\n], AgmKmlLayer);\n\nfunction createMVCEventObservable(array) {\n    const eventNames = ['insert_at', 'remove_at', 'set_at'];\n    return fromEventPattern((handler) => eventNames.map(evName => array.addListener(evName, (index, previous) => handler.apply(array, [{ 'newArr': array.getArray(), evName, index, previous }]))), (_handler, evListeners) => evListeners.forEach(evListener => evListener.remove()));\n}\nclass MvcArrayMock {\n    constructor() {\n        this.vals = [];\n        this.listeners = {\n            'remove_at': [],\n            'insert_at': [],\n            'set_at': [],\n        };\n    }\n    clear() {\n        for (let i = this.vals.length - 1; i >= 0; i--) {\n            this.removeAt(i);\n        }\n    }\n    getArray() {\n        return [...this.vals];\n    }\n    getAt(i) {\n        return this.vals[i];\n    }\n    getLength() {\n        return this.vals.length;\n    }\n    insertAt(i, elem) {\n        this.vals.splice(i, 0, elem);\n        this.listeners.insert_at.map(listener => listener(i));\n    }\n    pop() {\n        const deleted = this.vals.pop();\n        this.listeners.remove_at.map(listener => listener(this.vals.length, deleted));\n        return deleted;\n    }\n    push(elem) {\n        this.vals.push(elem);\n        this.listeners.insert_at.map(listener => listener(this.vals.length - 1));\n        return this.vals.length;\n    }\n    removeAt(i) {\n        const deleted = this.vals.splice(i, 1)[0];\n        this.listeners.remove_at.map(listener => listener(i, deleted));\n        return deleted;\n    }\n    setAt(i, elem) {\n        const deleted = this.vals[i];\n        this.vals[i] = elem;\n        this.listeners.set_at.map(listener => listener(i, deleted));\n    }\n    forEach(callback) {\n        this.vals.forEach(callback);\n    }\n    addListener(eventName, handler) {\n        const listenerArr = this.listeners[eventName];\n        listenerArr.push(handler);\n        return {\n            remove: () => {\n                listenerArr.splice(listenerArr.indexOf(handler), 1);\n            },\n        };\n    }\n}\n\nlet PolygonManager = class PolygonManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._polygons = new Map();\n    }\n    addPolygon(path) {\n        const polygonPromise = this._mapsWrapper.createPolygon({\n            clickable: path.clickable,\n            draggable: path.draggable,\n            editable: path.editable,\n            fillColor: path.fillColor,\n            fillOpacity: path.fillOpacity,\n            geodesic: path.geodesic,\n            paths: path.paths,\n            strokeColor: path.strokeColor,\n            strokeOpacity: path.strokeOpacity,\n            strokeWeight: path.strokeWeight,\n            visible: path.visible,\n            zIndex: path.zIndex,\n        });\n        this._polygons.set(path, polygonPromise);\n    }\n    updatePolygon(polygon) {\n        const m = this._polygons.get(polygon);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => this._zone.run(() => { l.setPaths(polygon.paths); }));\n    }\n    setPolygonOptions(path, options) {\n        return this._polygons.get(path).then((l) => { l.setOptions(options); });\n    }\n    deletePolygon(paths) {\n        const m = this._polygons.get(paths);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => {\n            return this._zone.run(() => {\n                l.setMap(null);\n                this._polygons.delete(paths);\n            });\n        });\n    }\n    getPath(polygon) {\n        return this._polygons.get(polygon)\n            .then((polygon) => polygon.getPath().getArray());\n    }\n    getPaths(polygon) {\n        return this._polygons.get(polygon)\n            .then((polygon) => polygon.getPaths().getArray().map((p) => p.getArray()));\n    }\n    createEventObservable(eventName, path) {\n        return new Observable((observer) => {\n            this._polygons.get(path).then((l) => {\n                l.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    createPathEventObservable(agmPolygon) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const polygon = yield this._polygons.get(agmPolygon);\n            const paths = polygon.getPaths();\n            const pathsChanges$ = createMVCEventObservable(paths);\n            return pathsChanges$.pipe(startWith({ newArr: paths.getArray() }), // in order to subscribe to them all\n            switchMap(parentMVEvent => merge(... // rest parameter\n            parentMVEvent.newArr.map((chMVC, index) => createMVCEventObservable(chMVC)\n                .pipe(map(chMVCEvent => ({ parentMVEvent, chMVCEvent, pathIndex: index })))))\n                .pipe(startWith({ parentMVEvent, chMVCEvent: null, pathIndex: null }))), // start the merged ob with an event signinifing change to parent\n            skip(1), // skip the manually added event\n            map(({ parentMVEvent, chMVCEvent, pathIndex }) => {\n                let retVal;\n                if (!chMVCEvent) {\n                    retVal = {\n                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n                        eventName: parentMVEvent.evName,\n                        index: parentMVEvent.index,\n                    };\n                    if (parentMVEvent.previous) {\n                        retVal.previous = parentMVEvent.previous.getArray();\n                    }\n                }\n                else {\n                    retVal = {\n                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n                        pathIndex,\n                        eventName: chMVCEvent.evName,\n                        index: chMVCEvent.index,\n                    };\n                    if (chMVCEvent.previous) {\n                        retVal.previous = chMVCEvent.previous;\n                    }\n                }\n                return retVal;\n            }));\n        });\n    }\n};\nPolygonManager.ɵfac = function PolygonManager_Factory(t) { return new (t || PolygonManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nPolygonManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PolygonManager, factory: function (t) { return PolygonManager.ɵfac(t); } });\nPolygonManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nPolygonManager = __decorate([ __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], PolygonManager);\n\nvar PolylineManager_1;\nlet PolylineManager = PolylineManager_1 = class PolylineManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._polylines = new Map();\n    }\n    static _convertPoints(line) {\n        const path = line._getPoints().map((point) => {\n            return { lat: point.latitude, lng: point.longitude };\n        });\n        return path;\n    }\n    static _convertPath(path) {\n        const symbolPath = google.maps.SymbolPath[path];\n        if (typeof symbolPath === 'number') {\n            return symbolPath;\n        }\n        else {\n            return path;\n        }\n    }\n    static _convertIcons(line) {\n        const icons = line._getIcons().map(agmIcon => ({\n            fixedRotation: agmIcon.fixedRotation,\n            offset: agmIcon.offset,\n            repeat: agmIcon.repeat,\n            icon: {\n                anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n                fillColor: agmIcon.fillColor,\n                fillOpacity: agmIcon.fillOpacity,\n                path: PolylineManager_1._convertPath(agmIcon.path),\n                rotation: agmIcon.rotation,\n                scale: agmIcon.scale,\n                strokeColor: agmIcon.strokeColor,\n                strokeOpacity: agmIcon.strokeOpacity,\n                strokeWeight: agmIcon.strokeWeight,\n            },\n        }));\n        // prune undefineds;\n        icons.forEach(icon => {\n            Object.entries(icon).forEach(([key, val]) => {\n                if (typeof val === 'undefined') {\n                    delete icon[key];\n                }\n            });\n            if (typeof icon.icon.anchor.x === 'undefined' ||\n                typeof icon.icon.anchor.y === 'undefined') {\n                delete icon.icon.anchor;\n            }\n        });\n        return icons;\n    }\n    addPolyline(line) {\n        const polylinePromise = this._mapsWrapper.getNativeMap()\n            .then(() => [PolylineManager_1._convertPoints(line),\n            PolylineManager_1._convertIcons(line)])\n            .then(([path, icons]) => this._mapsWrapper.createPolyline({\n            clickable: line.clickable,\n            draggable: line.draggable,\n            editable: line.editable,\n            geodesic: line.geodesic,\n            strokeColor: line.strokeColor,\n            strokeOpacity: line.strokeOpacity,\n            strokeWeight: line.strokeWeight,\n            visible: line.visible,\n            zIndex: line.zIndex,\n            path: path,\n            icons: icons,\n        }));\n        this._polylines.set(line, polylinePromise);\n    }\n    updatePolylinePoints(line) {\n        const path = PolylineManager_1._convertPoints(line);\n        const m = this._polylines.get(line);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => { return this._zone.run(() => { l.setPath(path); }); });\n    }\n    updateIconSequences(line) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._mapsWrapper.getNativeMap();\n            const icons = PolylineManager_1._convertIcons(line);\n            const m = this._polylines.get(line);\n            if (m == null) {\n                return;\n            }\n            return m.then(l => this._zone.run(() => l.setOptions({ icons: icons })));\n        });\n    }\n    setPolylineOptions(line, options) {\n        return this._polylines.get(line).then((l) => { l.setOptions(options); });\n    }\n    deletePolyline(line) {\n        const m = this._polylines.get(line);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => {\n            return this._zone.run(() => {\n                l.setMap(null);\n                this._polylines.delete(line);\n            });\n        });\n    }\n    getMVCPath(agmPolyline) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const polyline = yield this._polylines.get(agmPolyline);\n            return polyline.getPath();\n        });\n    }\n    getPath(agmPolyline) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getMVCPath(agmPolyline)).getArray();\n        });\n    }\n    createEventObservable(eventName, line) {\n        return new Observable((observer) => {\n            this._polylines.get(line).then((l) => {\n                l.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    createPathEventObservable(line) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mvcPath = yield this.getMVCPath(line);\n            return createMVCEventObservable(mvcPath);\n        });\n    }\n};\nPolylineManager.ɵfac = function PolylineManager_Factory(t) { return new (t || PolylineManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nPolylineManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PolylineManager, factory: function (t) { return PolylineManager.ɵfac(t); } });\nPolylineManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nPolylineManager = PolylineManager_1 = __decorate([ __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], PolylineManager);\n\nlet RectangleManager = class RectangleManager {\n    constructor(_apiWrapper, _zone) {\n        this._apiWrapper = _apiWrapper;\n        this._zone = _zone;\n        this._rectangles = new Map();\n    }\n    addRectangle(rectangle) {\n        this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n            bounds: {\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west,\n            },\n            clickable: rectangle.clickable,\n            draggable: rectangle.draggable,\n            editable: rectangle.editable,\n            fillColor: rectangle.fillColor,\n            fillOpacity: rectangle.fillOpacity,\n            strokeColor: rectangle.strokeColor,\n            strokeOpacity: rectangle.strokeOpacity,\n            strokePosition: rectangle.strokePosition,\n            strokeWeight: rectangle.strokeWeight,\n            visible: rectangle.visible,\n            zIndex: rectangle.zIndex,\n        }));\n    }\n    /**\n     * Removes the given rectangle from the map.\n     */\n    removeRectangle(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            r.setMap(null);\n            this._rectangles.delete(rectangle);\n        });\n    }\n    setOptions(rectangle, options) {\n        return this._rectangles.get(rectangle).then((r) => r.setOptions(options));\n    }\n    getBounds(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => r.getBounds());\n    }\n    setBounds(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setBounds({\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west,\n            });\n        });\n    }\n    setEditable(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setEditable(rectangle.editable);\n        });\n    }\n    setDraggable(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setDraggable(rectangle.draggable);\n        });\n    }\n    setVisible(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setVisible(rectangle.visible);\n        });\n    }\n    createEventObservable(eventName, rectangle) {\n        return Observable.create((observer) => {\n            let listener = null;\n            this._rectangles.get(rectangle).then((r) => {\n                listener = r.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n            return () => {\n                if (listener !== null) {\n                    listener.remove();\n                }\n            };\n        });\n    }\n};\nRectangleManager.ɵfac = function RectangleManager_Factory(t) { return new (t || RectangleManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nRectangleManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RectangleManager, factory: function (t) { return RectangleManager.ɵfac(t); } });\nRectangleManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nRectangleManager = __decorate([ __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], RectangleManager);\n\nvar AgmMap_1;\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\nlet AgmMap = AgmMap_1 = class AgmMap {\n    constructor(_elem, _mapsWrapper, _platformId, _fitBoundsService, _zone) {\n        this._elem = _elem;\n        this._mapsWrapper = _mapsWrapper;\n        this._platformId = _platformId;\n        this._fitBoundsService = _fitBoundsService;\n        this._zone = _zone;\n        /**\n         * The longitude that defines the center of the map.\n         */\n        this.longitude = 0;\n        /**\n         * The latitude that defines the center of the map.\n         */\n        this.latitude = 0;\n        /**\n         * The zoom level of the map. The default zoom level is 8.\n         */\n        this.zoom = 8;\n        /**\n         * Enables/disables if map is draggable.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = true;\n        /**\n         * Enables/disables zoom and center on double click. Enabled by default.\n         */\n        this.disableDoubleClickZoom = false;\n        /**\n         * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n         * value cannot get updated.\n         */\n        this.disableDefaultUI = false;\n        /**\n         * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n         */\n        this.scrollwheel = true;\n        /**\n         * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n         * enabled by default.\n         */\n        this.keyboardShortcuts = true;\n        /**\n         * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n         * modes, these styles will only apply to labels and geometry.\n         */\n        this.styles = [];\n        /**\n         * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n         * used to\n         * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n         */\n        this.usePanning = false;\n        /**\n         * Sets the viewport to contain the given bounds.\n         * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n         */\n        this.fitBounds = false;\n        /**\n         * The initial enabled/disabled state of the Scale control. This is disabled by default.\n         */\n        this.scaleControl = false;\n        /**\n         * The initial enabled/disabled state of the Map type control.\n         */\n        this.mapTypeControl = false;\n        /**\n         * The initial enabled/disabled state of the Pan control.\n         */\n        this.panControl = false;\n        /**\n         * The initial enabled/disabled state of the Rotate control.\n         */\n        this.rotateControl = false;\n        /**\n         * The initial enabled/disabled state of the Fullscreen control.\n         */\n        this.fullscreenControl = false;\n        /**\n         * The map mapTypeId. Defaults to 'roadmap'.\n         */\n        this.mapTypeId = 'roadmap';\n        /**\n         * When false, map icons are not clickable. A map icon represents a point of interest,\n         * also known as a POI. By default map icons are clickable.\n         */\n        this.clickableIcons = true;\n        /**\n         * A map icon represents a point of interest, also known as a POI.\n         * When map icons are clickable by default, an info window is displayed.\n         * When this property is set to false, the info window will not be shown but the click event\n         * will still fire\n         */\n        this.showDefaultInfoWindow = true;\n        /**\n         * This setting controls how gestures on the map are handled.\n         * Allowed values:\n         * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n         * - 'greedy'      (All touch gestures pan or zoom the map.)\n         * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n         * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n         */\n        this.gestureHandling = 'auto';\n        /**\n         * Controls the automatic switching behavior for the angle of incidence of\n         * the map. The only allowed values are 0 and 45. The value 0 causes the map\n         * to always use a 0° overhead view regardless of the zoom level and\n         * viewport. The value 45 causes the tilt angle to automatically switch to\n         * 45 whenever 45° imagery is available for the current zoom level and\n         * viewport, and switch back to 0 whenever 45° imagery is not available\n         * (this is the default behavior). 45° imagery is only available for\n         * satellite and hybrid map types, within some locations, and at some zoom\n         * levels. Note: getTilt returns the current tilt angle, not the value\n         * specified by this option. Because getTilt and this option refer to\n         * different things, do not bind() the tilt property; doing so may yield\n         * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n         */\n        this.tilt = 0;\n        this._observableSubscriptions = [];\n        /**\n         * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n         * marker or infoWindow).\n         */\n        this.mapClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n         * on a marker or infoWindow).\n         */\n        this.mapRightClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n         * on a marker or infoWindow).\n         */\n        this.mapDblClick = new EventEmitter();\n        /**\n         * This event emitter is fired when the map center changes.\n         */\n        this.centerChange = new EventEmitter();\n        /**\n         * This event is fired when the viewport bounds have changed.\n         */\n        this.boundsChange = new EventEmitter();\n        /**\n         * This event is fired when the mapTypeId property changes.\n         */\n        this.mapTypeIdChange = new EventEmitter();\n        /**\n         * This event is fired when the map becomes idle after panning or zooming.\n         */\n        this.idle = new EventEmitter();\n        /**\n         * This event is fired when the zoom level has changed.\n         */\n        this.zoomChange = new EventEmitter();\n        /**\n         * This event is fired when the google map is fully initialized.\n         * You get the google.maps.Map instance as a result of this EventEmitter.\n         */\n        this.mapReady = new EventEmitter();\n        /**\n         * This event is fired when the visible tiles have finished loading.\n         */\n        this.tilesLoaded = new EventEmitter();\n    }\n    /** @internal */\n    ngOnInit() {\n        if (isPlatformServer(this._platformId)) {\n            // The code is running on the server, do nothing\n            return;\n        }\n        // todo: this should be solved with a new component and a viewChild decorator\n        const container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n        this._initMapInstance(container);\n    }\n    _initMapInstance(el) {\n        this._mapsWrapper.createMap(el, {\n            center: { lat: this.latitude || 0, lng: this.longitude || 0 },\n            zoom: this.zoom,\n            minZoom: this.minZoom,\n            maxZoom: this.maxZoom,\n            controlSize: this.controlSize,\n            disableDefaultUI: this.disableDefaultUI,\n            disableDoubleClickZoom: this.disableDoubleClickZoom,\n            scrollwheel: this.scrollwheel,\n            backgroundColor: this.backgroundColor,\n            draggable: this.draggable,\n            draggableCursor: this.draggableCursor,\n            draggingCursor: this.draggingCursor,\n            keyboardShortcuts: this.keyboardShortcuts,\n            styles: this.styles,\n            zoomControl: this.zoomControl,\n            zoomControlOptions: this.zoomControlOptions,\n            streetViewControl: this.streetViewControl,\n            streetViewControlOptions: this.streetViewControlOptions,\n            scaleControl: this.scaleControl,\n            scaleControlOptions: this.scaleControlOptions,\n            mapTypeControl: this.mapTypeControl,\n            mapTypeControlOptions: this.mapTypeControlOptions,\n            panControl: this.panControl,\n            panControlOptions: this.panControlOptions,\n            rotateControl: this.rotateControl,\n            rotateControlOptions: this.rotateControlOptions,\n            fullscreenControl: this.fullscreenControl,\n            fullscreenControlOptions: this.fullscreenControlOptions,\n            mapTypeId: this.mapTypeId,\n            clickableIcons: this.clickableIcons,\n            gestureHandling: this.gestureHandling,\n            tilt: this.tilt,\n            restriction: this.restriction,\n        })\n            .then(() => this._mapsWrapper.getNativeMap())\n            .then(map => this.mapReady.emit(map));\n        // register event listeners\n        this._handleMapCenterChange();\n        this._handleMapZoomChange();\n        this._handleMapMouseEvents();\n        this._handleBoundsChange();\n        this._handleMapTypeIdChange();\n        this._handleTilesLoadedEvent();\n        this._handleIdleEvent();\n    }\n    /** @internal */\n    ngOnDestroy() {\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach((s) => s.unsubscribe());\n        // remove all listeners from the map instance\n        this._mapsWrapper.clearInstanceListeners();\n        if (this._fitBoundsSubscription) {\n            this._fitBoundsSubscription.unsubscribe();\n        }\n    }\n    /* @internal */\n    ngOnChanges(changes) {\n        this._updateMapOptionsChanges(changes);\n        this._updatePosition(changes);\n    }\n    _updateMapOptionsChanges(changes) {\n        let options = {};\n        let optionKeys = Object.keys(changes).filter(k => AgmMap_1._mapOptionsAttributes.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        this._mapsWrapper.setMapOptions(options);\n    }\n    /**\n     * Triggers a resize event on the google map instance.\n     * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n     * Returns a promise that gets resolved after the event was triggered.\n     */\n    triggerResize(recenter = true) {\n        // Note: When we would trigger the resize event and show the map in the same turn (which is a\n        // common case for triggering a resize event), then the resize event would not\n        // work (to show the map), so we trigger the event in a timeout.\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                return this._mapsWrapper.triggerMapEvent('resize').then(() => {\n                    if (recenter) {\n                        this.fitBounds != null ? this._fitBounds() : this._setCenter();\n                    }\n                    resolve();\n                });\n            });\n        });\n    }\n    _updatePosition(changes) {\n        if (changes['latitude'] == null && changes['longitude'] == null &&\n            !changes['fitBounds']) {\n            // no position update needed\n            return;\n        }\n        // we prefer fitBounds in changes\n        if ('fitBounds' in changes) {\n            this._fitBounds();\n            return;\n        }\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n            return;\n        }\n        this._setCenter();\n    }\n    _setCenter() {\n        let newCenter = {\n            lat: this.latitude,\n            lng: this.longitude,\n        };\n        if (this.usePanning) {\n            this._mapsWrapper.panTo(newCenter);\n        }\n        else {\n            this._mapsWrapper.setCenter(newCenter);\n        }\n    }\n    _fitBounds() {\n        switch (this.fitBounds) {\n            case true:\n                this._subscribeToFitBoundsUpdates();\n                break;\n            case false:\n                if (this._fitBoundsSubscription) {\n                    this._fitBoundsSubscription.unsubscribe();\n                }\n                break;\n            default:\n                this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n        }\n    }\n    _subscribeToFitBoundsUpdates() {\n        this._zone.runOutsideAngular(() => {\n            this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(b => {\n                this._zone.run(() => this._updateBounds(b, this.fitBoundsPadding));\n            });\n        });\n    }\n    _updateBounds(bounds, padding) {\n        if (!bounds) {\n            return;\n        }\n        if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n            const newBounds = new google.maps.LatLngBounds();\n            newBounds.union(bounds);\n            bounds = newBounds;\n        }\n        if (this.usePanning) {\n            this._mapsWrapper.panToBounds(bounds, padding);\n            return;\n        }\n        this._mapsWrapper.fitBounds(bounds, padding);\n    }\n    _isLatLngBoundsLiteral(bounds) {\n        return bounds != null && bounds.extend === undefined;\n    }\n    _handleMapCenterChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(() => {\n            this._mapsWrapper.getCenter().then((center) => {\n                this.latitude = center.lat();\n                this.longitude = center.lng();\n                this.centerChange.emit({ lat: this.latitude, lng: this.longitude });\n            });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleBoundsChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(() => {\n            this._mapsWrapper.getBounds().then((bounds) => { this.boundsChange.emit(bounds); });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapTypeIdChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(() => {\n            this._mapsWrapper.getMapTypeId().then((mapTypeId) => { this.mapTypeIdChange.emit(mapTypeId); });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapZoomChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(() => {\n            this._mapsWrapper.getZoom().then((z) => {\n                this.zoom = z;\n                this.zoomChange.emit(z);\n            });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleIdleEvent() {\n        const s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(() => { this.idle.emit(void 0); });\n        this._observableSubscriptions.push(s);\n    }\n    _handleTilesLoadedEvent() {\n        const s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(() => this.tilesLoaded.emit(void 0));\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapMouseEvents() {\n        const events = [\n            { name: 'click', emitter: this.mapClick },\n            { name: 'rightclick', emitter: this.mapRightClick },\n            { name: 'dblclick', emitter: this.mapDblClick },\n        ];\n        events.forEach((e) => {\n            const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe((event) => {\n                let value = {\n                    coords: {\n                        lat: event.latLng.lat(),\n                        lng: event.latLng.lng(),\n                    },\n                    placeId: event.placeId,\n                };\n                // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n                if (value.placeId && !this.showDefaultInfoWindow) {\n                    event.stop();\n                }\n                e.emitter.emit(value);\n            });\n            this._observableSubscriptions.push(s);\n        });\n    }\n};\nAgmMap.ɵfac = function AgmMap_Factory(t) { return new (t || AgmMap)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(FitBoundsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nAgmMap.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AgmMap, selectors: [[\"agm-map\"]], hostVars: 2, hostBindings: function AgmMap_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"sebm-google-map-container\", true);\n    } }, inputs: { longitude: \"longitude\", latitude: \"latitude\", zoom: \"zoom\", draggable: [\"mapDraggable\", \"draggable\"], disableDoubleClickZoom: \"disableDoubleClickZoom\", disableDefaultUI: \"disableDefaultUI\", scrollwheel: \"scrollwheel\", keyboardShortcuts: \"keyboardShortcuts\", styles: \"styles\", usePanning: \"usePanning\", fitBounds: \"fitBounds\", scaleControl: \"scaleControl\", mapTypeControl: \"mapTypeControl\", panControl: \"panControl\", rotateControl: \"rotateControl\", fullscreenControl: \"fullscreenControl\", mapTypeId: \"mapTypeId\", clickableIcons: \"clickableIcons\", showDefaultInfoWindow: \"showDefaultInfoWindow\", gestureHandling: \"gestureHandling\", tilt: \"tilt\", minZoom: \"minZoom\", maxZoom: \"maxZoom\", controlSize: \"controlSize\", backgroundColor: \"backgroundColor\", draggableCursor: \"draggableCursor\", draggingCursor: \"draggingCursor\", zoomControl: \"zoomControl\", zoomControlOptions: \"zoomControlOptions\", streetViewControl: \"streetViewControl\", streetViewControlOptions: \"streetViewControlOptions\", fitBoundsPadding: \"fitBoundsPadding\", scaleControlOptions: \"scaleControlOptions\", mapTypeControlOptions: \"mapTypeControlOptions\", panControlOptions: \"panControlOptions\", rotateControlOptions: \"rotateControlOptions\", fullscreenControlOptions: \"fullscreenControlOptions\", restriction: \"restriction\" }, outputs: { mapClick: \"mapClick\", mapRightClick: \"mapRightClick\", mapDblClick: \"mapDblClick\", centerChange: \"centerChange\", boundsChange: \"boundsChange\", mapTypeIdChange: \"mapTypeIdChange\", idle: \"idle\", zoomChange: \"zoomChange\", mapReady: \"mapReady\", tilesLoaded: \"tilesLoaded\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            CircleManager,\n            DataLayerManager,\n            DataLayerManager,\n            FitBoundsService,\n            GoogleMapsAPIWrapper,\n            InfoWindowManager,\n            KmlLayerManager,\n            LayerManager,\n            MarkerManager,\n            PolygonManager,\n            PolylineManager,\n            RectangleManager,\n        ]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 3, vars: 0, consts: [[1, \"agm-map-container-inner\", \"sebm-google-map-container-inner\"], [1, \"agm-map-content\"]], template: function AgmMap_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".agm-map-container-inner[_ngcontent-%COMP%] {\\n      width: inherit;\\n      height: inherit;\\n    }\\n    .agm-map-content[_ngcontent-%COMP%] {\\n      display:none;\\n    }\"] });\n/**\n * Map option attributes that can change over time\n */\nAgmMap._mapOptionsAttributes = [\n    'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\n    'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl',\n    'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom',\n    'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions',\n    'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions',\n    'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction',\n];\nAgmMap.ctorParameters = () => [\n    { type: ElementRef },\n    { type: GoogleMapsAPIWrapper },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: FitBoundsService },\n    { type: NgZone }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"longitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"latitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"zoom\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmMap.prototype, \"minZoom\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmMap.prototype, \"maxZoom\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmMap.prototype, \"controlSize\", void 0);\n__decorate([\n    Input('mapDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"disableDoubleClickZoom\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"disableDefaultUI\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"scrollwheel\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMap.prototype, \"backgroundColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMap.prototype, \"draggableCursor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMap.prototype, \"draggingCursor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"keyboardShortcuts\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], AgmMap.prototype, \"zoomControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"zoomControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], AgmMap.prototype, \"styles\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"usePanning\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], AgmMap.prototype, \"streetViewControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"streetViewControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"fitBounds\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"fitBoundsPadding\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"scaleControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"scaleControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"mapTypeControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"mapTypeControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"panControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"panControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"rotateControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"rotateControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"fullscreenControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"fullscreenControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMap.prototype, \"mapTypeId\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"clickableIcons\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"showDefaultInfoWindow\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMap.prototype, \"gestureHandling\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"tilt\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"restriction\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"mapClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"mapRightClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"mapDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"centerChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"boundsChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"mapTypeIdChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"idle\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"zoomChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"mapReady\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"tilesLoaded\", void 0);\nAgmMap = AgmMap_1 = __decorate([ __param(2, Inject(PLATFORM_ID)),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        GoogleMapsAPIWrapper,\n        Object,\n        FitBoundsService,\n        NgZone])\n], AgmMap);\n\nvar AgmMarker_1;\nlet markerId = 0;\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nlet AgmMarker = AgmMarker_1 = class AgmMarker {\n    constructor(_markerManager) {\n        this._markerManager = _markerManager;\n        /**\n         * If true, the marker can be dragged. Default value is false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If true, the marker is visible\n         */\n        this.visible = true;\n        /**\n         * Whether to automatically open the child info window when the marker is clicked.\n         */\n        this.openInfoWindow = true;\n        /**\n         * The marker's opacity between 0.0 and 1.0.\n         */\n        this.opacity = 1;\n        /**\n         * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n         * front of markers with lower values. By default, markers are displayed according to their\n         * vertical position on screen, with lower markers appearing in front of markers further up the\n         * screen.\n         */\n        this.zIndex = 1;\n        /**\n         * If true, the marker can be clicked. Default value is true.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.clickable = true;\n        /**\n         * This event is fired when the marker's animation property changes.\n         *\n         * @memberof AgmMarker\n         */\n        this.animationChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the marker.\n         */\n        this.markerClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks twice on the marker.\n         */\n        this.markerDblClick = new EventEmitter();\n        /**\n         * This event is fired when the user rightclicks on the marker.\n         */\n        this.markerRightClick = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the marker.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the marker.\n         */\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the marker.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user mouses over the marker.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the user mouses outside the marker.\n         */\n        this.mouseOut = new EventEmitter();\n        /** @internal */\n        this.infoWindow = new QueryList();\n        this._markerAddedToManger = false;\n        this._observableSubscriptions = [];\n        this._fitBoundsDetails$ = new ReplaySubject(1);\n        this._id = (markerId++).toString();\n    }\n    /* @internal */\n    ngAfterContentInit() {\n        this.handleInfoWindowUpdate();\n        this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());\n    }\n    handleInfoWindowUpdate() {\n        if (this.infoWindow.length > 1) {\n            throw new Error('Expected no more than one info window.');\n        }\n        this.infoWindow.forEach(marker => {\n            marker.hostMarker = this;\n        });\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (typeof this.latitude === 'string') {\n            this.latitude = Number(this.latitude);\n        }\n        if (typeof this.longitude === 'string') {\n            this.longitude = Number(this.longitude);\n        }\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n            return;\n        }\n        if (!this._markerAddedToManger) {\n            this._markerManager.addMarker(this);\n            this._updateFitBoundsDetails();\n            this._markerAddedToManger = true;\n            this._addEventListeners();\n            return;\n        }\n        if (changes['latitude'] || changes['longitude']) {\n            this._markerManager.updateMarkerPosition(this);\n            this._updateFitBoundsDetails();\n        }\n        if (changes['title']) {\n            this._markerManager.updateTitle(this);\n        }\n        if (changes['label']) {\n            this._markerManager.updateLabel(this);\n        }\n        if (changes['draggable']) {\n            this._markerManager.updateDraggable(this);\n        }\n        if (changes['iconUrl']) {\n            this._markerManager.updateIcon(this);\n        }\n        if (changes['opacity']) {\n            this._markerManager.updateOpacity(this);\n        }\n        if (changes['visible']) {\n            this._markerManager.updateVisible(this);\n        }\n        if (changes['zIndex']) {\n            this._markerManager.updateZIndex(this);\n        }\n        if (changes['clickable']) {\n            this._markerManager.updateClickable(this);\n        }\n        if (changes['animation']) {\n            this._markerManager.updateAnimation(this);\n        }\n    }\n    /** @internal */\n    getFitBoundsDetails$() {\n        return this._fitBoundsDetails$.asObservable();\n    }\n    _updateFitBoundsDetails() {\n        this._fitBoundsDetails$.next({ latLng: { lat: this.latitude, lng: this.longitude } });\n    }\n    _addEventListeners() {\n        const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {\n            if (this.openInfoWindow) {\n                this.infoWindow.forEach(infoWindow => infoWindow.open());\n            }\n            this.markerClick.emit(this);\n        });\n        this._observableSubscriptions.push(cs);\n        const dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(() => {\n            this.markerDblClick.emit(null);\n        });\n        this._observableSubscriptions.push(dcs);\n        const rc = this._markerManager.createEventObservable('rightclick', this).subscribe(() => {\n            this.markerRightClick.emit(null);\n        });\n        this._observableSubscriptions.push(rc);\n        const ds = this._markerManager.createEventObservable('dragstart', this)\n            .subscribe((e) => {\n            this.dragStart.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(ds);\n        const d = this._markerManager.createEventObservable('drag', this)\n            .subscribe((e) => {\n            this.drag.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(d);\n        const de = this._markerManager.createEventObservable('dragend', this)\n            .subscribe((e) => {\n            this.dragEnd.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(de);\n        const mover = this._markerManager.createEventObservable('mouseover', this)\n            .subscribe((e) => {\n            this.mouseOver.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(mover);\n        const mout = this._markerManager.createEventObservable('mouseout', this)\n            .subscribe((e) => {\n            this.mouseOut.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(mout);\n        const anChng = this._markerManager.createEventObservable('animation_changed', this)\n            .subscribe(() => {\n            this.animationChange.emit(this.animation);\n        });\n        this._observableSubscriptions.push(anChng);\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return 'AgmMarker-' + this._id.toString(); }\n    /** @internal */\n    ngOnDestroy() {\n        this._markerManager.deleteMarker(this);\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach((s) => s.unsubscribe());\n    }\n};\nAgmMarker.ɵfac = function AgmMarker_Factory(t) { return new (t || AgmMarker)(ɵngcc0.ɵɵdirectiveInject(MarkerManager)); };\nAgmMarker.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmMarker, selectors: [[\"agm-marker\"]], contentQueries: function AgmMarker_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmInfoWindow, false);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infoWindow = _t);\n    } }, inputs: { latitude: \"latitude\", longitude: \"longitude\", title: \"title\", label: \"label\", draggable: [\"markerDraggable\", \"draggable\"], iconUrl: \"iconUrl\", openInfoWindow: \"openInfoWindow\", opacity: \"opacity\", visible: \"visible\", zIndex: \"zIndex\", animation: \"animation\", clickable: [\"markerClickable\", \"clickable\"] }, outputs: { markerClick: \"markerClick\", dragStart: \"dragStart\", drag: \"drag\", dragEnd: \"dragEnd\", mouseOver: \"mouseOver\", mouseOut: \"mouseOut\", animationChange: \"animationChange\", markerDblClick: \"markerDblClick\", markerRightClick: \"markerRightClick\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmMarker_1) },\n        ]), ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmMarker.ctorParameters = () => [\n    { type: MarkerManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmMarker.prototype, \"latitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmMarker.prototype, \"longitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMarker.prototype, \"title\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"label\", void 0);\n__decorate([\n    Input('markerDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMarker.prototype, \"iconUrl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"visible\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"openInfoWindow\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"opacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"zIndex\", void 0);\n__decorate([\n    Input('markerClickable'),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"clickable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMarker.prototype, \"animation\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"animationChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"markerClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"markerDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"markerRightClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"dragStart\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"drag\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"dragEnd\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"mouseOver\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"mouseOut\", void 0);\n__decorate([\n    ContentChildren(AgmInfoWindow),\n    __metadata(\"design:type\", QueryList)\n], AgmMarker.prototype, \"infoWindow\", void 0);\nAgmMarker = AgmMarker_1 = __decorate([ __metadata(\"design:paramtypes\", [MarkerManager])\n], AgmMarker);\n\nvar AgmPolygon_1;\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: Array<LatLngLiteral> = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: Array<Array<LatLngLiteral>> = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\nlet AgmPolygon = AgmPolygon_1 = class AgmPolygon {\n    constructor(_polygonManager) {\n        this._polygonManager = _polygonManager;\n        /**\n         * Indicates whether this Polygon handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this shape over the map. The geodesic\n         * property defines the mode of dragging. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this shape by dragging the control\n         * points shown at the vertices and on each segment. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * When true, edges of the polygon are interpreted as geodesic and will\n         * follow the curvature of the Earth. When false, edges of the polygon are\n         * rendered as straight lines in screen space. Note that the shape of a\n         * geodesic polygon may appear to change when dragged, as the dimensions\n         * are maintained relative to the surface of the earth. Defaults to false.\n         */\n        this.geodesic = false;\n        /**\n         * The ordered sequence of coordinates that designates a closed loop.\n         * Unlike polylines, a polygon may consist of one or more paths.\n         *  As a result, the paths property may specify one or more arrays of\n         * LatLng coordinates. Paths are closed automatically; do not repeat the\n         * first vertex of the path as the last vertex. Simple polygons may be\n         * defined using a single array of LatLngs. More complex polygons may\n         * specify an array of arrays. Any simple arrays are converted into Arrays.\n         * Inserting or removing LatLngs from the Array will automatically update\n         * the polygon on the map.\n         */\n        this.paths = [];\n        /**\n         * This event is fired when the DOM click event is fired on the Polygon.\n         */\n        this.polyClick = new EventEmitter();\n        /**\n         * This event is fired when the DOM dblclick event is fired on the Polygon.\n         */\n        this.polyDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the polygon.\n         */\n        this.polyDrag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the polygon.\n         */\n        this.polyDragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the polygon.\n         */\n        this.polyDragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the Polygon.\n         */\n        this.polyMouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the Polygon.\n         */\n        this.polyMouseMove = new EventEmitter();\n        /**\n         * This event is fired on Polygon mouseout.\n         */\n        this.polyMouseOut = new EventEmitter();\n        /**\n         * This event is fired on Polygon mouseover.\n         */\n        this.polyMouseOver = new EventEmitter();\n        /**\n         * This event is fired whe the DOM mouseup event is fired on the Polygon\n         */\n        this.polyMouseUp = new EventEmitter();\n        /**\n         * This event is fired when the Polygon is right-clicked on.\n         */\n        this.polyRightClick = new EventEmitter();\n        /**\n         * This event is fired after Polygon first path changes.\n         */\n        this.polyPathsChange = new EventEmitter();\n        this._polygonAddedToManager = false;\n        this._subscriptions = [];\n    }\n    /** @internal */\n    ngAfterContentInit() {\n        if (!this._polygonAddedToManager) {\n            this._init();\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this._polygonAddedToManager) {\n            this._init();\n            return;\n        }\n        this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n    }\n    _init() {\n        this._polygonManager.addPolygon(this);\n        this._polygonAddedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const handlers = [\n            { name: 'click', handler: (ev) => this.polyClick.emit(ev) },\n            { name: 'dblclick', handler: (ev) => this.polyDblClick.emit(ev) },\n            { name: 'drag', handler: (ev) => this.polyDrag.emit(ev) },\n            { name: 'dragend', handler: (ev) => this.polyDragEnd.emit(ev) },\n            { name: 'dragstart', handler: (ev) => this.polyDragStart.emit(ev) },\n            { name: 'mousedown', handler: (ev) => this.polyMouseDown.emit(ev) },\n            { name: 'mousemove', handler: (ev) => this.polyMouseMove.emit(ev) },\n            { name: 'mouseout', handler: (ev) => this.polyMouseOut.emit(ev) },\n            { name: 'mouseover', handler: (ev) => this.polyMouseOver.emit(ev) },\n            { name: 'mouseup', handler: (ev) => this.polyMouseUp.emit(ev) },\n            { name: 'rightclick', handler: (ev) => this.polyRightClick.emit(ev) },\n        ];\n        handlers.forEach((obj) => {\n            const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n        this._polygonManager.createPathEventObservable(this)\n            .then(paths$ => {\n            const os = paths$.subscribe(pathEvent => this.polyPathsChange.emit(pathEvent));\n            this._subscriptions.push(os);\n        });\n    }\n    _updatePolygonOptions(changes) {\n        return Object.keys(changes)\n            .filter(k => AgmPolygon_1._polygonOptionsAttributes.indexOf(k) !== -1)\n            .reduce((obj, k) => {\n            obj[k] = changes[k].currentValue;\n            return obj;\n        }, {});\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    ngOnDestroy() {\n        this._polygonManager.deletePolygon(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach((s) => s.unsubscribe());\n    }\n    getPath() {\n        return this._polygonManager.getPath(this);\n    }\n    getPaths() {\n        return this._polygonManager.getPaths(this);\n    }\n};\nAgmPolygon.ɵfac = function AgmPolygon_Factory(t) { return new (t || AgmPolygon)(ɵngcc0.ɵɵdirectiveInject(PolygonManager)); };\nAgmPolygon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmPolygon, selectors: [[\"agm-polygon\"]], inputs: { clickable: \"clickable\", draggable: [\"polyDraggable\", \"draggable\"], editable: \"editable\", geodesic: \"geodesic\", paths: \"paths\", fillColor: \"fillColor\", fillOpacity: \"fillOpacity\", strokeColor: \"strokeColor\", strokeOpacity: \"strokeOpacity\", strokeWeight: \"strokeWeight\", visible: \"visible\", zIndex: \"zIndex\" }, outputs: { polyClick: \"polyClick\", polyDblClick: \"polyDblClick\", polyDrag: \"polyDrag\", polyDragEnd: \"polyDragEnd\", polyDragStart: \"polyDragStart\", polyMouseDown: \"polyMouseDown\", polyMouseMove: \"polyMouseMove\", polyMouseOut: \"polyMouseOut\", polyMouseOver: \"polyMouseOver\", polyMouseUp: \"polyMouseUp\", polyRightClick: \"polyRightClick\", polyPathsChange: \"polyPathsChange\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmPolygon._polygonOptionsAttributes = [\n    'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\n    'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\n    'editable', 'visible',\n];\nAgmPolygon.ctorParameters = () => [\n    { type: PolygonManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolygon.prototype, \"clickable\", void 0);\n__decorate([\n    Input('polyDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmPolygon.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolygon.prototype, \"editable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolygon.prototype, \"fillColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolygon.prototype, \"fillOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolygon.prototype, \"geodesic\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], AgmPolygon.prototype, \"paths\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolygon.prototype, \"strokeColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolygon.prototype, \"strokeOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolygon.prototype, \"strokeWeight\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], AgmPolygon.prototype, \"visible\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolygon.prototype, \"zIndex\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyDrag\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyDragEnd\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyDragStart\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyMouseDown\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyMouseMove\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyMouseOut\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyMouseOver\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyMouseUp\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyRightClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], AgmPolygon.prototype, \"polyPathsChange\", void 0);\nAgmPolygon = AgmPolygon_1 = __decorate([ __metadata(\"design:paramtypes\", [PolygonManager])\n], AgmPolygon);\n\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n *\n * @export\n * @class AgmPolylineIcon\n */\nlet AgmPolylineIcon = class AgmPolylineIcon {\n    ngOnInit() {\n        if (this.path == null) {\n            throw new Error('Icon Sequence path is required');\n        }\n    }\n};\nAgmPolylineIcon.ɵfac = function AgmPolylineIcon_Factory(t) { return new (t || AgmPolylineIcon)(); };\nAgmPolylineIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmPolylineIcon, selectors: [[\"agm-icon-sequence\"]], inputs: { fixedRotation: \"fixedRotation\", offset: \"offset\", repeat: \"repeat\", anchorX: \"anchorX\", anchorY: \"anchorY\", fillColor: \"fillColor\", fillOpacity: \"fillOpacity\", path: \"path\", rotation: \"rotation\", scale: \"scale\", strokeColor: \"strokeColor\", strokeOpacity: \"strokeOpacity\", strokeWeight: \"strokeWeight\" } });\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], AgmPolylineIcon.prototype, \"fixedRotation\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolylineIcon.prototype, \"offset\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolylineIcon.prototype, \"repeat\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"anchorX\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"anchorY\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolylineIcon.prototype, \"fillColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"fillOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolylineIcon.prototype, \"path\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"rotation\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"scale\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolylineIcon.prototype, \"strokeColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"strokeOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"strokeWeight\", void 0);\n\nvar AgmPolylinePoint_1;\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\nlet AgmPolylinePoint = AgmPolylinePoint_1 = class AgmPolylinePoint {\n    constructor() {\n        /**\n         * This event emitter gets emitted when the position of the point changed.\n         */\n        this.positionChanged = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        if (changes['latitude'] || changes['longitude']) {\n            const position = {\n                lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n                lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude,\n            };\n            this.positionChanged.emit(position);\n        }\n    }\n    /** @internal */\n    getFitBoundsDetails$() {\n        return this.positionChanged.pipe(startWith({ lat: this.latitude, lng: this.longitude }), map(position => ({ latLng: position })));\n    }\n};\nAgmPolylinePoint.ɵfac = function AgmPolylinePoint_Factory(t) { return new (t || AgmPolylinePoint)(); };\nAgmPolylinePoint.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmPolylinePoint, selectors: [[\"agm-polyline-point\"]], inputs: { latitude: \"latitude\", longitude: \"longitude\" }, outputs: { positionChanged: \"positionChanged\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmPolylinePoint_1) },\n        ]), ɵngcc0.ɵɵNgOnChangesFeature] });\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylinePoint.prototype, \"latitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylinePoint.prototype, \"longitude\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolylinePoint.prototype, \"positionChanged\", void 0);\nAgmPolylinePoint = AgmPolylinePoint_1 = __decorate([ __metadata(\"design:paramtypes\", [])\n], AgmPolylinePoint);\n\nvar AgmPolyline_1;\nlet polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nlet AgmPolyline = AgmPolyline_1 = class AgmPolyline {\n    constructor(_polylineManager) {\n        this._polylineManager = _polylineManager;\n        /**\n         * Indicates whether this Polyline handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this shape over the map. The geodesic property defines the\n         * mode of dragging. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this shape by dragging the control points shown at the\n         * vertices and on each segment. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n         * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n         * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n         * are maintained relative to the surface of the earth. Defaults to false.\n         */\n        this.geodesic = false;\n        /**\n         * Whether this polyline is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the DOM click event is fired on the Polyline.\n         */\n        this.lineClick = new EventEmitter();\n        /**\n         * This event is fired when the DOM dblclick event is fired on the Polyline.\n         */\n        this.lineDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the polyline.\n         */\n        this.lineDrag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the polyline.\n         */\n        this.lineDragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the polyline.\n         */\n        this.lineDragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the Polyline.\n         */\n        this.lineMouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the Polyline.\n         */\n        this.lineMouseMove = new EventEmitter();\n        /**\n         * This event is fired on Polyline mouseout.\n         */\n        this.lineMouseOut = new EventEmitter();\n        /**\n         * This event is fired on Polyline mouseover.\n         */\n        this.lineMouseOver = new EventEmitter();\n        /**\n         * This event is fired whe the DOM mouseup event is fired on the Polyline\n         */\n        this.lineMouseUp = new EventEmitter();\n        /**\n         * This event is fired when the Polyline is right-clicked on.\n         */\n        this.lineRightClick = new EventEmitter();\n        /**\n         * This event is fired after Polyline's path changes.\n         */\n        this.polyPathChange = new EventEmitter();\n        this._polylineAddedToManager = false;\n        this._subscriptions = [];\n        this._id = (polylineId++).toString();\n    }\n    /** @internal */\n    ngAfterContentInit() {\n        if (this.points.length) {\n            this.points.forEach((point) => {\n                const s = point.positionChanged.subscribe(() => { this._polylineManager.updatePolylinePoints(this); });\n                this._subscriptions.push(s);\n            });\n        }\n        if (!this._polylineAddedToManager) {\n            this._init();\n        }\n        const pointSub = this.points.changes.subscribe(() => this._polylineManager.updatePolylinePoints(this));\n        this._subscriptions.push(pointSub);\n        this._polylineManager.updatePolylinePoints(this);\n        const iconSub = this.iconSequences.changes.subscribe(() => this._polylineManager.updateIconSequences(this));\n        this._subscriptions.push(iconSub);\n    }\n    ngOnChanges(changes) {\n        if (!this._polylineAddedToManager) {\n            this._init();\n            return;\n        }\n        let options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmPolyline_1._polylineOptionsAttributes.indexOf(k) !== -1);\n        optionKeys.forEach(k => options[k] = changes[k].currentValue);\n        this._polylineManager.setPolylineOptions(this, options);\n    }\n    getPath() {\n        return this._polylineManager.getPath(this);\n    }\n    _init() {\n        this._polylineManager.addPolyline(this);\n        this._polylineAddedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const handlers = [\n            { name: 'click', handler: (ev) => this.lineClick.emit(ev) },\n            { name: 'dblclick', handler: (ev) => this.lineDblClick.emit(ev) },\n            { name: 'drag', handler: (ev) => this.lineDrag.emit(ev) },\n            { name: 'dragend', handler: (ev) => this.lineDragEnd.emit(ev) },\n            { name: 'dragstart', handler: (ev) => this.lineDragStart.emit(ev) },\n            { name: 'mousedown', handler: (ev) => this.lineMouseDown.emit(ev) },\n            { name: 'mousemove', handler: (ev) => this.lineMouseMove.emit(ev) },\n            { name: 'mouseout', handler: (ev) => this.lineMouseOut.emit(ev) },\n            { name: 'mouseover', handler: (ev) => this.lineMouseOver.emit(ev) },\n            { name: 'mouseup', handler: (ev) => this.lineMouseUp.emit(ev) },\n            { name: 'rightclick', handler: (ev) => this.lineRightClick.emit(ev) },\n        ];\n        handlers.forEach((obj) => {\n            const os = this._polylineManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n        this._polylineManager.createPathEventObservable(this).then((ob$) => {\n            const os = ob$.subscribe(pathEvent => this.polyPathChange.emit(pathEvent));\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    _getPoints() {\n        if (this.points) {\n            return this.points.toArray();\n        }\n        return [];\n    }\n    _getIcons() {\n        if (this.iconSequences) {\n            return this.iconSequences.toArray();\n        }\n        return [];\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    ngOnDestroy() {\n        this._polylineManager.deletePolyline(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach((s) => s.unsubscribe());\n    }\n};\nAgmPolyline.ɵfac = function AgmPolyline_Factory(t) { return new (t || AgmPolyline)(ɵngcc0.ɵɵdirectiveInject(PolylineManager)); };\nAgmPolyline.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmPolyline, selectors: [[\"agm-polyline\"]], contentQueries: function AgmPolyline_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmPolylinePoint, false);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmPolylineIcon, false);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.points = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iconSequences = _t);\n    } }, inputs: { clickable: \"clickable\", draggable: [\"polylineDraggable\", \"draggable\"], editable: \"editable\", geodesic: \"geodesic\", visible: \"visible\", strokeColor: \"strokeColor\", strokeOpacity: \"strokeOpacity\", strokeWeight: \"strokeWeight\", zIndex: \"zIndex\" }, outputs: { lineClick: \"lineClick\", lineDblClick: \"lineDblClick\", lineDrag: \"lineDrag\", lineDragEnd: \"lineDragEnd\", lineDragStart: \"lineDragStart\", lineMouseDown: \"lineMouseDown\", lineMouseMove: \"lineMouseMove\", lineMouseOut: \"lineMouseOut\", lineMouseOver: \"lineMouseOver\", lineMouseUp: \"lineMouseUp\", lineRightClick: \"lineRightClick\", polyPathChange: \"polyPathChange\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmPolyline._polylineOptionsAttributes = [\n    'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',\n    'zIndex',\n];\nAgmPolyline.ctorParameters = () => [\n    { type: PolylineManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"clickable\", void 0);\n__decorate([\n    Input('polylineDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"editable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"geodesic\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolyline.prototype, \"strokeColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolyline.prototype, \"strokeOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolyline.prototype, \"strokeWeight\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"visible\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolyline.prototype, \"zIndex\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineDrag\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineDragEnd\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineDragStart\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineMouseDown\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineMouseMove\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineMouseOut\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineMouseOver\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineMouseUp\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineRightClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"polyPathChange\", void 0);\n__decorate([\n    ContentChildren(AgmPolylinePoint),\n    __metadata(\"design:type\", QueryList)\n], AgmPolyline.prototype, \"points\", void 0);\n__decorate([\n    ContentChildren(AgmPolylineIcon),\n    __metadata(\"design:type\", QueryList)\n], AgmPolyline.prototype, \"iconSequences\", void 0);\nAgmPolyline = AgmPolyline_1 = __decorate([ __metadata(\"design:paramtypes\", [PolylineManager])\n], AgmPolyline);\n\nvar AgmRectangle_1;\nlet AgmRectangle = AgmRectangle_1 = class AgmRectangle {\n    constructor(_manager) {\n        this._manager = _manager;\n        /**\n         * Indicates whether this Rectangle handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this rectangle over the map. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this rectangle by dragging the control points shown at\n         * the center and around the circumference of the rectangle. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * The stroke position. Defaults to CENTER.\n         * This property is not supported on Internet Explorer 8 and earlier.\n         */\n        this.strokePosition = 'CENTER';\n        /**\n         * The stroke width in pixels.\n         */\n        this.strokeWeight = 0;\n        /**\n         * Whether this rectangle is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the rectangle's is changed.\n         */\n        this.boundsChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the rectangle.\n         */\n        this.rectangleClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the rectangle.\n         */\n        this.rectangleDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the rectangle.\n         */\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the rectangle.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the rectangle.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the rectangle.\n         */\n        this.mouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the rectangle.\n         */\n        this.mouseMove = new EventEmitter();\n        /**\n         * This event is fired on rectangle mouseout.\n         */\n        this.mouseOut = new EventEmitter();\n        /**\n         * This event is fired on rectangle mouseover.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the DOM mouseup event is fired on the rectangle.\n         */\n        this.mouseUp = new EventEmitter();\n        /**\n         * This event is fired when the rectangle is right-clicked on.\n         */\n        this.rightClick = new EventEmitter();\n        this._rectangleAddedToManager = false;\n        this._eventSubscriptions = [];\n    }\n    /** @internal */\n    ngOnInit() {\n        this._manager.addRectangle(this);\n        this._rectangleAddedToManager = true;\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._rectangleAddedToManager) {\n            return;\n        }\n        if (changes['north'] ||\n            changes['east'] ||\n            changes['south'] ||\n            changes['west']) {\n            this._manager.setBounds(this);\n        }\n        if (changes['editable']) {\n            this._manager.setEditable(this);\n        }\n        if (changes['draggable']) {\n            this._manager.setDraggable(this);\n        }\n        if (changes['visible']) {\n            this._manager.setVisible(this);\n        }\n        this._updateRectangleOptionsChanges(changes);\n    }\n    _updateRectangleOptionsChanges(changes) {\n        let options = {};\n        let optionKeys = Object.keys(changes).filter(k => AgmRectangle_1._mapOptions.indexOf(k) !== -1);\n        optionKeys.forEach(k => {\n            options[k] = changes[k].currentValue;\n        });\n        if (optionKeys.length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _registerEventListeners() {\n        let events = new Map();\n        events.set('bounds_changed', this.boundsChange);\n        events.set('click', this.rectangleClick);\n        events.set('dblclick', this.rectangleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragStart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('rightclick', this.rightClick);\n        events.forEach((eventEmitter, eventName) => {\n            this._eventSubscriptions.push(this._manager\n                .createEventObservable(eventName, this)\n                .subscribe(value => {\n                switch (eventName) {\n                    case 'bounds_changed':\n                        this._manager.getBounds(this).then(bounds => eventEmitter.emit({\n                            north: bounds.getNorthEast().lat(),\n                            east: bounds.getNorthEast().lng(),\n                            south: bounds.getSouthWest().lat(),\n                            west: bounds.getSouthWest().lng(),\n                        }));\n                        break;\n                    default:\n                        eventEmitter.emit({\n                            coords: { lat: value.latLng.lat(), lng: value.latLng.lng() },\n                        });\n                }\n            }));\n        });\n    }\n    /** @internal */\n    ngOnDestroy() {\n        this._eventSubscriptions.forEach(function (s) {\n            s.unsubscribe();\n        });\n        this._eventSubscriptions = null;\n        this._manager.removeRectangle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Rectangle.\n     */\n    getBounds() {\n        return this._manager.getBounds(this);\n    }\n};\nAgmRectangle.ɵfac = function AgmRectangle_Factory(t) { return new (t || AgmRectangle)(ɵngcc0.ɵɵdirectiveInject(RectangleManager)); };\nAgmRectangle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmRectangle, selectors: [[\"agm-rectangle\"]], inputs: { clickable: \"clickable\", draggable: [\"rectangleDraggable\", \"draggable\"], editable: \"editable\", strokePosition: \"strokePosition\", strokeWeight: \"strokeWeight\", visible: \"visible\", north: \"north\", east: \"east\", south: \"south\", west: \"west\", fillColor: \"fillColor\", fillOpacity: \"fillOpacity\", strokeColor: \"strokeColor\", strokeOpacity: \"strokeOpacity\", zIndex: \"zIndex\" }, outputs: { boundsChange: \"boundsChange\", rectangleClick: \"rectangleClick\", rectangleDblClick: \"rectangleDblClick\", drag: \"drag\", dragEnd: \"dragEnd\", dragStart: \"dragStart\", mouseDown: \"mouseDown\", mouseMove: \"mouseMove\", mouseOut: \"mouseOut\", mouseOver: \"mouseOver\", mouseUp: \"mouseUp\", rightClick: \"rightClick\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmRectangle._mapOptions = [\n    'fillColor',\n    'fillOpacity',\n    'strokeColor',\n    'strokeOpacity',\n    'strokePosition',\n    'strokeWeight',\n    'visible',\n    'zIndex',\n    'clickable',\n];\nAgmRectangle.ctorParameters = () => [\n    { type: RectangleManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"north\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"east\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"south\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"west\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmRectangle.prototype, \"clickable\", void 0);\n__decorate([\n    Input('rectangleDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmRectangle.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmRectangle.prototype, \"editable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmRectangle.prototype, \"fillColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"fillOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmRectangle.prototype, \"strokeColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"strokeOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmRectangle.prototype, \"strokePosition\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmRectangle.prototype, \"strokeWeight\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmRectangle.prototype, \"visible\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"zIndex\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"boundsChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"rectangleClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"rectangleDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"drag\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"dragEnd\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"dragStart\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"mouseDown\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"mouseMove\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"mouseOut\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"mouseOver\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"mouseUp\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"rightClick\", void 0);\nAgmRectangle = AgmRectangle_1 = __decorate([ __metadata(\"design:paramtypes\", [RectangleManager])\n], AgmRectangle);\n\nlet layerId$3 = 0;\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\nlet AgmTransitLayer = class AgmTransitLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$3++).toString();\n        /**\n         * Hide/show transit layer\n         */\n        this.visible = true;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addTransitLayer(this, { visible: this.visible });\n        this._addedToManager = true;\n    }\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        if (changes['visible'] != null) {\n            this._manager.toggleLayerVisibility(this, { visible: changes['visible'].currentValue });\n        }\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmTransitLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n};\nAgmTransitLayer.ɵfac = function AgmTransitLayer_Factory(t) { return new (t || AgmTransitLayer)(ɵngcc0.ɵɵdirectiveInject(LayerManager)); };\nAgmTransitLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmTransitLayer, selectors: [[\"agm-transit-layer\"]], inputs: { visible: \"visible\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmTransitLayer.ctorParameters = () => [\n    { type: LayerManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmTransitLayer.prototype, \"visible\", void 0);\nAgmTransitLayer = __decorate([ __metadata(\"design:paramtypes\", [LayerManager])\n], AgmTransitLayer);\n\nvar google$1;\nvar SymbolPath;\n(function (SymbolPath) {\n    SymbolPath[SymbolPath[\"BACKWARD_CLOSED_ARROW\"] = 3] = \"BACKWARD_CLOSED_ARROW\";\n    SymbolPath[SymbolPath[\"BACKWARD_OPEN_ARROW\"] = 4] = \"BACKWARD_OPEN_ARROW\";\n    SymbolPath[SymbolPath[\"CIRCLE\"] = 0] = \"CIRCLE\";\n    SymbolPath[SymbolPath[\"FORWARD_CLOSED_ARROW\"] = 1] = \"FORWARD_CLOSED_ARROW\";\n    SymbolPath[SymbolPath[\"FORWARD_OPEN_ARROW\"] = 2] = \"FORWARD_OPEN_ARROW\";\n})(SymbolPath || (SymbolPath = {}));\n/**\n * Identifiers used to specify the placement of controls on the map. Controls are\n * positioned relative to other controls in the same layout position. Controls that\n * are added first are positioned closer to the edge of the map.\n */\nvar ControlPosition;\n(function (ControlPosition) {\n    ControlPosition[ControlPosition[\"RIGHT_BOTTOM\"] = 0] = \"RIGHT_BOTTOM\";\n    ControlPosition[ControlPosition[\"TOP_LEFT\"] = 1] = \"TOP_LEFT\";\n    ControlPosition[ControlPosition[\"TOP_CENTER\"] = 2] = \"TOP_CENTER\";\n    ControlPosition[ControlPosition[\"TOP_RIGHT\"] = 3] = \"TOP_RIGHT\";\n    ControlPosition[ControlPosition[\"LEFT_CENTER\"] = 4] = \"LEFT_CENTER\";\n    ControlPosition[ControlPosition[\"LEFT_TOP\"] = 5] = \"LEFT_TOP\";\n    ControlPosition[ControlPosition[\"LEFT_BOTTOM\"] = 6] = \"LEFT_BOTTOM\";\n    ControlPosition[ControlPosition[\"RIGHT_TOP\"] = 7] = \"RIGHT_TOP\";\n    ControlPosition[ControlPosition[\"RIGHT_CENTER\"] = 8] = \"RIGHT_CENTER\";\n    ControlPosition[ControlPosition[\"BOTTOM_RIGHT\"] = 9] = \"BOTTOM_RIGHT\";\n    ControlPosition[ControlPosition[\"BOTTOM_LEFT\"] = 10] = \"BOTTOM_LEFT\";\n    ControlPosition[ControlPosition[\"BOTTOM_CENTER\"] = 11] = \"BOTTOM_CENTER\";\n})(ControlPosition || (ControlPosition = {}));\nvar MapTypeId;\n(function (MapTypeId) {\n    /** This map type displays a transparent layer of major streets on satellite images. */\n    MapTypeId[MapTypeId[\"HYBRID\"] = 0] = \"HYBRID\";\n    /** This map type displays a normal street map. */\n    MapTypeId[MapTypeId[\"ROADMAP\"] = 1] = \"ROADMAP\";\n    /** This map type displays satellite images. */\n    MapTypeId[MapTypeId[\"SATELLITE\"] = 2] = \"SATELLITE\";\n    /** This map type displays maps with physical features such as terrain and vegetation. */\n    MapTypeId[MapTypeId[\"TERRAIN\"] = 3] = \"TERRAIN\";\n})(MapTypeId || (MapTypeId = {}));\nvar MapTypeControlStyle;\n(function (MapTypeControlStyle) {\n    MapTypeControlStyle[MapTypeControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    MapTypeControlStyle[MapTypeControlStyle[\"DROPDOWN_MENU\"] = 2] = \"DROPDOWN_MENU\";\n    MapTypeControlStyle[MapTypeControlStyle[\"HORIZONTAL_BAR\"] = 1] = \"HORIZONTAL_BAR\";\n})(MapTypeControlStyle || (MapTypeControlStyle = {}));\nvar ScaleControlStyle;\n(function (ScaleControlStyle) {\n    ScaleControlStyle[ScaleControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(ScaleControlStyle || (ScaleControlStyle = {}));\nvar ZoomControlStyle;\n(function (ZoomControlStyle) {\n    ZoomControlStyle[ZoomControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    ZoomControlStyle[ZoomControlStyle[\"LARGE\"] = 1] = \"LARGE\";\n    ZoomControlStyle[ZoomControlStyle[\"SMALL\"] = 2] = \"SMALL\";\n})(ZoomControlStyle || (ZoomControlStyle = {}));\nvar GeocoderLocationType;\n(function (GeocoderLocationType) {\n    GeocoderLocationType[\"APPROXIMATE\"] = \"APPROXIMATE\";\n    GeocoderLocationType[\"GEOMETRIC_CENTER\"] = \"GEOMETRIC_CENTER\";\n    GeocoderLocationType[\"RANGE_INTERPOLATED\"] = \"RANGE_INTERPOLATED\";\n    GeocoderLocationType[\"ROOFTOP\"] = \"ROOFTOP\";\n})(GeocoderLocationType || (GeocoderLocationType = {}));\nvar GeocoderStatus;\n(function (GeocoderStatus) {\n    GeocoderStatus[\"ERROR\"] = \"ERROR\";\n    GeocoderStatus[\"INVALID_REQUEST\"] = \"INVALID_REQUEST\";\n    GeocoderStatus[\"OK\"] = \"OK\";\n    GeocoderStatus[\"OVER_QUERY_LIMIT\"] = \"OVER_QUERY_LIMIT\";\n    GeocoderStatus[\"REQUEST_DENIED\"] = \"REQUEST_DENIED\";\n    GeocoderStatus[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    GeocoderStatus[\"ZERO_RESULTS\"] = \"ZERO_RESULTS\";\n})(GeocoderStatus || (GeocoderStatus = {}));\n\nlet AgmGeocoder = class AgmGeocoder {\n    constructor(loader) {\n        const connectableGeocoder$ = new Observable(subscriber => {\n            loader.load().then(() => subscriber.next());\n        })\n            .pipe(map(() => this._createGeocoder()), multicast(new ReplaySubject(1)));\n        connectableGeocoder$.connect(); // ignore the subscription\n        // since we will remain subscribed till application exits\n        this.geocoder$ = connectableGeocoder$;\n    }\n    geocode(request) {\n        return this.geocoder$.pipe(switchMap((geocoder) => this._getGoogleResults(geocoder, request)));\n    }\n    _getGoogleResults(geocoder, request) {\n        const geocodeObservable = bindCallback(geocoder.geocode);\n        return geocodeObservable(request).pipe(switchMap(([results, status]) => {\n            if (status === GeocoderStatus.OK) {\n                return of(results);\n            }\n            return throwError(status);\n        }));\n    }\n    _createGeocoder() {\n        return new google.maps.Geocoder();\n    }\n};\nAgmGeocoder.ɵfac = function AgmGeocoder_Factory(t) { return new (t || AgmGeocoder)(ɵngcc0.ɵɵinject(MapsAPILoader)); };\nAgmGeocoder.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AgmGeocoder, factory: function (t) { return AgmGeocoder.ɵfac(t); }, providedIn: 'root' });\nAgmGeocoder.ctorParameters = () => [\n    { type: MapsAPILoader }\n];\nAgmGeocoder.ngInjectableDef = ɵɵdefineInjectable({ factory: function AgmGeocoder_Factory() { return new AgmGeocoder(ɵɵinject(MapsAPILoader)); }, token: AgmGeocoder, providedIn: \"root\" });\nAgmGeocoder = __decorate([ __metadata(\"design:paramtypes\", [MapsAPILoader])\n], AgmGeocoder);\n\nclass WindowRef {\n    getNativeWindow() { return window; }\n}\nclass DocumentRef {\n    getNativeDocument() { return document; }\n}\nconst BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];\n\nvar GoogleMapsScriptProtocol;\n(function (GoogleMapsScriptProtocol) {\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\n})(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\nconst LAZY_MAPS_API_CONFIG = new InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');\nlet LazyMapsAPILoader = class LazyMapsAPILoader extends MapsAPILoader {\n    constructor(config = null, w, d, localeId) {\n        super();\n        this.localeId = localeId;\n        this._SCRIPT_ID = 'agmGoogleMapsApiScript';\n        this.callbackName = `agmLazyMapsAPILoader`;\n        this._config = config || {};\n        this._windowRef = w;\n        this._documentRef = d;\n    }\n    load() {\n        const window = this._windowRef.getNativeWindow();\n        if (window.google && window.google.maps) {\n            // Google maps already loaded on the page.\n            return Promise.resolve();\n        }\n        if (this._scriptLoadingPromise) {\n            return this._scriptLoadingPromise;\n        }\n        // this can happen in HMR situations or Stackblitz.io editors.\n        const scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n        if (scriptOnPage) {\n            this._assignScriptLoadingPromise(scriptOnPage);\n            return this._scriptLoadingPromise;\n        }\n        const script = this._documentRef.getNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.id = this._SCRIPT_ID;\n        script.src = this._getScriptSrc(this.callbackName);\n        this._assignScriptLoadingPromise(script);\n        this._documentRef.getNativeDocument().body.appendChild(script);\n        return this._scriptLoadingPromise;\n    }\n    _assignScriptLoadingPromise(scriptElem) {\n        this._scriptLoadingPromise = new Promise((resolve, reject) => {\n            this._windowRef.getNativeWindow()[this.callbackName] = () => {\n                resolve();\n            };\n            scriptElem.onerror = (error) => {\n                reject(error);\n            };\n        });\n    }\n    _getScriptSrc(callbackName) {\n        let protocolType = (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\n        let protocol;\n        switch (protocolType) {\n            case GoogleMapsScriptProtocol.AUTO:\n                protocol = '';\n                break;\n            case GoogleMapsScriptProtocol.HTTP:\n                protocol = 'http:';\n                break;\n            case GoogleMapsScriptProtocol.HTTPS:\n                protocol = 'https:';\n                break;\n        }\n        const hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n        const queryParams = {\n            v: this._config.apiVersion || 'quarterly',\n            callback: callbackName,\n            key: this._config.apiKey,\n            client: this._config.clientId,\n            channel: this._config.channel,\n            libraries: this._config.libraries,\n            region: this._config.region,\n            language: this._config.language || this.localeId !== 'en-US' ? this.localeId : null,\n        };\n        const params = Object.keys(queryParams)\n            .filter((k) => queryParams[k] != null)\n            .filter((k) => {\n            // remove empty arrays\n            return !Array.isArray(queryParams[k]) ||\n                (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\n        })\n            .map((k) => {\n            // join arrays as comma seperated strings\n            let i = queryParams[k];\n            if (Array.isArray(i)) {\n                return { key: k, value: i.join(',') };\n            }\n            return { key: k, value: queryParams[k] };\n        })\n            .map((entry) => {\n            return `${entry.key}=${entry.value}`;\n        })\n            .join('&');\n        return `${protocol}//${hostAndPath}?${params}`;\n    }\n};\nLazyMapsAPILoader.ɵfac = function LazyMapsAPILoader_Factory(t) { return new (t || LazyMapsAPILoader)(ɵngcc0.ɵɵinject(LAZY_MAPS_API_CONFIG, 8), ɵngcc0.ɵɵinject(WindowRef), ɵngcc0.ɵɵinject(DocumentRef), ɵngcc0.ɵɵinject(LOCALE_ID)); };\nLazyMapsAPILoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LazyMapsAPILoader, factory: function (t) { return LazyMapsAPILoader.ɵfac(t); } });\nLazyMapsAPILoader.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_MAPS_API_CONFIG,] }] },\n    { type: WindowRef },\n    { type: DocumentRef },\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\nLazyMapsAPILoader = __decorate([ __param(0, Optional()), __param(0, Inject(LAZY_MAPS_API_CONFIG)),\n    __param(3, Inject(LOCALE_ID)),\n    __metadata(\"design:paramtypes\", [Object, WindowRef, DocumentRef, String])\n], LazyMapsAPILoader);\n\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\nclass NoOpMapsAPILoader {\n    load() {\n        if (!window.google || !window.google.maps) {\n            throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');\n        }\n        return Promise.resolve();\n    }\n}\n\n// exported map types\n\nvar AgmCoreModule_1;\n/**\n * @internal\n */\nfunction coreDirectives() {\n    return [\n        AgmBicyclingLayer,\n        AgmCircle,\n        AgmDataLayer,\n        AgmFitBounds,\n        AgmInfoWindow,\n        AgmKmlLayer,\n        AgmMap,\n        AgmMarker,\n        AgmPolygon,\n        AgmPolyline,\n        AgmPolylineIcon,\n        AgmPolylinePoint,\n        AgmRectangle,\n        AgmTransitLayer,\n    ];\n}\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\nlet AgmCoreModule = AgmCoreModule_1 = class AgmCoreModule {\n    /**\n     * Please use this method when you register the module at the root level.\n     */\n    static forRoot(lazyMapsAPILoaderConfig) {\n        return {\n            ngModule: AgmCoreModule_1,\n            providers: [\n                ...BROWSER_GLOBALS_PROVIDERS, { provide: MapsAPILoader, useClass: LazyMapsAPILoader },\n                { provide: LAZY_MAPS_API_CONFIG, useValue: lazyMapsAPILoaderConfig },\n            ],\n        };\n    }\n};\nAgmCoreModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AgmCoreModule });\nAgmCoreModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AgmCoreModule_Factory(t) { return new (t || AgmCoreModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MapsAPILoader, [{\n        type: Injectable\n    }], null, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleMapsAPIWrapper, [{\n        type: Injectable\n    }], function () { return [{ type: MapsAPILoader }, { type: ɵngcc0.NgZone }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayerManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmBicyclingLayer, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-bicycling-layer'\n            }]\n    }], function () { return [{ type: LayerManager }]; }, { visible: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CircleManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmCircle, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-circle'\n            }]\n    }], function () { return [{ type: CircleManager }]; }, { clickable: [{\n            type: Input\n        }], draggable: [{\n            type: Input,\n            args: ['circleDraggable']\n        }], editable: [{\n            type: Input\n        }], radius: [{\n            type: Input\n        }], strokePosition: [{\n            type: Input\n        }], strokeWeight: [{\n            type: Input\n        }], visible: [{\n            type: Input\n        }], centerChange: [{\n            type: Output\n        }], circleClick: [{\n            type: Output\n        }], circleDblClick: [{\n            type: Output\n        }], drag: [{\n            type: Output\n        }], dragEnd: [{\n            type: Output\n        }], dragStart: [{\n            type: Output\n        }], mouseDown: [{\n            type: Output\n        }], mouseMove: [{\n            type: Output\n        }], mouseOut: [{\n            type: Output\n        }], mouseOver: [{\n            type: Output\n        }], mouseUp: [{\n            type: Output\n        }], radiusChange: [{\n            type: Output\n        }], rightClick: [{\n            type: Output\n        }], latitude: [{\n            type: Input\n        }], longitude: [{\n            type: Input\n        }], fillColor: [{\n            type: Input\n        }], fillOpacity: [{\n            type: Input\n        }], strokeColor: [{\n            type: Input\n        }], strokeOpacity: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataLayerManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmDataLayer, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-data-layer'\n            }]\n    }], function () { return [{ type: DataLayerManager }]; }, { layerClick: [{\n            type: Output\n        }], geoJson: [{\n            type: Input\n        }], style: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FitBoundsService, [{\n        type: Injectable\n    }], function () { return [{ type: MapsAPILoader }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmFitBounds, [{\n        type: Directive,\n        args: [{\n                selector: '[agmFitBounds]'\n            }]\n    }], function () { return [{ type: FitBoundsAccessor, decorators: [{\n                type: Self\n            }] }, { type: FitBoundsService }]; }, { agmFitBounds: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MarkerManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InfoWindowManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }, { type: MarkerManager }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmInfoWindow, [{\n        type: Component,\n        args: [{\n                selector: 'agm-info-window',\n                template: `<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `\n            }]\n    }], function () { return [{ type: InfoWindowManager }, { type: ɵngcc0.ElementRef }]; }, { isOpen: [{\n            type: Input\n        }], infoWindowClose: [{\n            type: Output\n        }], latitude: [{\n            type: Input\n        }], longitude: [{\n            type: Input\n        }], disableAutoPan: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }], maxWidth: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(KmlLayerManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmKmlLayer, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-kml-layer'\n            }]\n    }], function () { return [{ type: KmlLayerManager }]; }, { clickable: [{\n            type: Input\n        }], preserveViewport: [{\n            type: Input\n        }], screenOverlays: [{\n            type: Input\n        }], suppressInfoWindows: [{\n            type: Input\n        }], url: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }], layerClick: [{\n            type: Output\n        }], defaultViewportChange: [{\n            type: Output\n        }], statusChange: [{\n            type: Output\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PolygonManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PolylineManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RectangleManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmMap, [{\n        type: Component,\n        args: [{\n                selector: 'agm-map',\n                providers: [\n                    CircleManager,\n                    DataLayerManager,\n                    DataLayerManager,\n                    FitBoundsService,\n                    GoogleMapsAPIWrapper,\n                    InfoWindowManager,\n                    KmlLayerManager,\n                    LayerManager,\n                    MarkerManager,\n                    PolygonManager,\n                    PolylineManager,\n                    RectangleManager,\n                ],\n                host: {\n                    // todo: deprecated - we will remove it with the next version\n                    '[class.sebm-google-map-container]': 'true'\n                },\n                template: `\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\n              <div class='agm-map-content'>\n                <ng-content></ng-content>\n              </div>\n  `,\n                styles: [`\n    .agm-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content {\n      display:none;\n    }\n  `]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: GoogleMapsAPIWrapper }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: FitBoundsService }, { type: ɵngcc0.NgZone }]; }, { longitude: [{\n            type: Input\n        }], latitude: [{\n            type: Input\n        }], zoom: [{\n            type: Input\n        }], draggable: [{\n            type: Input,\n            args: ['mapDraggable']\n        }], disableDoubleClickZoom: [{\n            type: Input\n        }], disableDefaultUI: [{\n            type: Input\n        }], scrollwheel: [{\n            type: Input\n        }], keyboardShortcuts: [{\n            type: Input\n        }], styles: [{\n            type: Input\n        }], usePanning: [{\n            type: Input\n        }], fitBounds: [{\n            type: Input\n        }], scaleControl: [{\n            type: Input\n        }], mapTypeControl: [{\n            type: Input\n        }], panControl: [{\n            type: Input\n        }], rotateControl: [{\n            type: Input\n        }], fullscreenControl: [{\n            type: Input\n        }], mapTypeId: [{\n            type: Input\n        }], clickableIcons: [{\n            type: Input\n        }], showDefaultInfoWindow: [{\n            type: Input\n        }], gestureHandling: [{\n            type: Input\n        }], tilt: [{\n            type: Input\n        }], mapClick: [{\n            type: Output\n        }], mapRightClick: [{\n            type: Output\n        }], mapDblClick: [{\n            type: Output\n        }], centerChange: [{\n            type: Output\n        }], boundsChange: [{\n            type: Output\n        }], mapTypeIdChange: [{\n            type: Output\n        }], idle: [{\n            type: Output\n        }], zoomChange: [{\n            type: Output\n        }], mapReady: [{\n            type: Output\n        }], tilesLoaded: [{\n            type: Output\n        }], minZoom: [{\n            type: Input\n        }], maxZoom: [{\n            type: Input\n        }], controlSize: [{\n            type: Input\n        }], backgroundColor: [{\n            type: Input\n        }], draggableCursor: [{\n            type: Input\n        }], draggingCursor: [{\n            type: Input\n        }], zoomControl: [{\n            type: Input\n        }], zoomControlOptions: [{\n            type: Input\n        }], streetViewControl: [{\n            type: Input\n        }], streetViewControlOptions: [{\n            type: Input\n        }], fitBoundsPadding: [{\n            type: Input\n        }], scaleControlOptions: [{\n            type: Input\n        }], mapTypeControlOptions: [{\n            type: Input\n        }], panControlOptions: [{\n            type: Input\n        }], rotateControlOptions: [{\n            type: Input\n        }], fullscreenControlOptions: [{\n            type: Input\n        }], restriction: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmMarker, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-marker',\n                providers: [\n                    { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmMarker_1) },\n                ],\n                inputs: [\n                    'latitude', 'longitude', 'title', 'label', 'draggable: markerDraggable', 'iconUrl',\n                    'openInfoWindow', 'opacity', 'visible', 'zIndex', 'animation',\n                ],\n                outputs: ['markerClick', 'dragStart', 'drag', 'dragEnd', 'mouseOver', 'mouseOut']\n            }]\n    }], function () { return [{ type: MarkerManager }]; }, { draggable: [{\n            type: Input,\n            args: ['markerDraggable']\n        }], visible: [{\n            type: Input\n        }], openInfoWindow: [{\n            type: Input\n        }], opacity: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }], clickable: [{\n            type: Input,\n            args: ['markerClickable']\n        }], animationChange: [{\n            type: Output\n        }], markerClick: [{\n            type: Output\n        }], markerDblClick: [{\n            type: Output\n        }], markerRightClick: [{\n            type: Output\n        }], dragStart: [{\n            type: Output\n        }], drag: [{\n            type: Output\n        }], dragEnd: [{\n            type: Output\n        }], mouseOver: [{\n            type: Output\n        }], mouseOut: [{\n            type: Output\n        }], infoWindow: [{\n            type: ContentChildren,\n            args: [AgmInfoWindow]\n        }], latitude: [{\n            type: Input\n        }], longitude: [{\n            type: Input\n        }], title: [{\n            type: Input\n        }], label: [{\n            type: Input\n        }], iconUrl: [{\n            type: Input\n        }], animation: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmPolygon, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-polygon'\n            }]\n    }], function () { return [{ type: PolygonManager }]; }, { clickable: [{\n            type: Input\n        }], draggable: [{\n            type: Input,\n            args: ['polyDraggable']\n        }], editable: [{\n            type: Input\n        }], geodesic: [{\n            type: Input\n        }], paths: [{\n            type: Input\n        }], polyClick: [{\n            type: Output\n        }], polyDblClick: [{\n            type: Output\n        }], polyDrag: [{\n            type: Output\n        }], polyDragEnd: [{\n            type: Output\n        }], polyDragStart: [{\n            type: Output\n        }], polyMouseDown: [{\n            type: Output\n        }], polyMouseMove: [{\n            type: Output\n        }], polyMouseOut: [{\n            type: Output\n        }], polyMouseOver: [{\n            type: Output\n        }], polyMouseUp: [{\n            type: Output\n        }], polyRightClick: [{\n            type: Output\n        }], polyPathsChange: [{\n            type: Output\n        }], fillColor: [{\n            type: Input\n        }], fillOpacity: [{\n            type: Input\n        }], strokeColor: [{\n            type: Input\n        }], strokeOpacity: [{\n            type: Input\n        }], strokeWeight: [{\n            type: Input\n        }], visible: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmPolylineIcon, [{\n        type: Directive,\n        args: [{ selector: 'agm-polyline agm-icon-sequence' }]\n    }], null, { fixedRotation: [{\n            type: Input\n        }], offset: [{\n            type: Input\n        }], repeat: [{\n            type: Input\n        }], anchorX: [{\n            type: Input\n        }], anchorY: [{\n            type: Input\n        }], fillColor: [{\n            type: Input\n        }], fillOpacity: [{\n            type: Input\n        }], path: [{\n            type: Input\n        }], rotation: [{\n            type: Input\n        }], scale: [{\n            type: Input\n        }], strokeColor: [{\n            type: Input\n        }], strokeOpacity: [{\n            type: Input\n        }], strokeWeight: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmPolylinePoint, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-polyline-point',\n                providers: [\n                    { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmPolylinePoint_1) },\n                ]\n            }]\n    }], function () { return []; }, { positionChanged: [{\n            type: Output\n        }], latitude: [{\n            type: Input\n        }], longitude: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmPolyline, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-polyline'\n            }]\n    }], function () { return [{ type: PolylineManager }]; }, { clickable: [{\n            type: Input\n        }], draggable: [{\n            type: Input,\n            args: ['polylineDraggable']\n        }], editable: [{\n            type: Input\n        }], geodesic: [{\n            type: Input\n        }], visible: [{\n            type: Input\n        }], lineClick: [{\n            type: Output\n        }], lineDblClick: [{\n            type: Output\n        }], lineDrag: [{\n            type: Output\n        }], lineDragEnd: [{\n            type: Output\n        }], lineDragStart: [{\n            type: Output\n        }], lineMouseDown: [{\n            type: Output\n        }], lineMouseMove: [{\n            type: Output\n        }], lineMouseOut: [{\n            type: Output\n        }], lineMouseOver: [{\n            type: Output\n        }], lineMouseUp: [{\n            type: Output\n        }], lineRightClick: [{\n            type: Output\n        }], polyPathChange: [{\n            type: Output\n        }], strokeColor: [{\n            type: Input\n        }], strokeOpacity: [{\n            type: Input\n        }], strokeWeight: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }], points: [{\n            type: ContentChildren,\n            args: [AgmPolylinePoint]\n        }], iconSequences: [{\n            type: ContentChildren,\n            args: [AgmPolylineIcon]\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmRectangle, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-rectangle'\n            }]\n    }], function () { return [{ type: RectangleManager }]; }, { clickable: [{\n            type: Input\n        }], draggable: [{\n            type: Input,\n            args: ['rectangleDraggable']\n        }], editable: [{\n            type: Input\n        }], strokePosition: [{\n            type: Input\n        }], strokeWeight: [{\n            type: Input\n        }], visible: [{\n            type: Input\n        }], boundsChange: [{\n            type: Output\n        }], rectangleClick: [{\n            type: Output\n        }], rectangleDblClick: [{\n            type: Output\n        }], drag: [{\n            type: Output\n        }], dragEnd: [{\n            type: Output\n        }], dragStart: [{\n            type: Output\n        }], mouseDown: [{\n            type: Output\n        }], mouseMove: [{\n            type: Output\n        }], mouseOut: [{\n            type: Output\n        }], mouseOver: [{\n            type: Output\n        }], mouseUp: [{\n            type: Output\n        }], rightClick: [{\n            type: Output\n        }], north: [{\n            type: Input\n        }], east: [{\n            type: Input\n        }], south: [{\n            type: Input\n        }], west: [{\n            type: Input\n        }], fillColor: [{\n            type: Input\n        }], fillOpacity: [{\n            type: Input\n        }], strokeColor: [{\n            type: Input\n        }], strokeOpacity: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmTransitLayer, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-transit-layer'\n            }]\n    }], function () { return [{ type: LayerManager }]; }, { visible: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmGeocoder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MapsAPILoader }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LazyMapsAPILoader, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LAZY_MAPS_API_CONFIG]\n            }] }, { type: WindowRef }, { type: DocumentRef }, { type: String, decorators: [{\n                type: Inject,\n                args: [LOCALE_ID]\n            }] }]; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AgmCoreModule, { declarations: [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer], exports: [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmCoreModule, [{\n        type: NgModule,\n        args: [{ declarations: coreDirectives(), exports: coreDirectives() }]\n    }], null, null); })();\n\n// main modules\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AgmBicyclingLayer, AgmCircle, AgmCoreModule, AgmDataLayer, AgmFitBounds, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer, CircleManager, ControlPosition, DataLayerManager, FitBoundsAccessor, GeocoderLocationType, GeocoderStatus, GoogleMapsAPIWrapper, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapTypeId, MapsAPILoader, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, ScaleControlStyle, ZoomControlStyle, FitBoundsService as ɵa, coreDirectives as ɵb, WindowRef as ɵc, DocumentRef as ɵd, BROWSER_GLOBALS_PROVIDERS as ɵe };\n\n//# sourceMappingURL=agm-core.js.map","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-google-map',\n  templateUrl: './google-map.component.html',\n  styleUrls: ['./google-map.component.scss']\n})\nexport class GoogleMapComponent implements OnInit {\n  lat = 21.1591857;\n  lng = 72.7522563;\n  latA = 21.7613308;\n  lngA = 71.6753074;\n  zoom = 8;\n\n  styles: any = [{\n    featureType: 'all',\n    stylers: [{\n      saturation: -80\n    }]\n  }, {\n    featureType: 'road.arterial',\n    elementType: 'geometry',\n    stylers: [{\n      hue: '#00ffee'\n    }, {\n      saturation: 50\n    }]\n  }, {\n    featureType: 'poi.business',\n    elementType: 'labels',\n    stylers: [{\n      visibility: 'off'\n    }]\n  }];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {GoogleMapComponent} from './google-map.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: GoogleMapComponent,\n    data: {\n      breadcrumb: 'Google Map',\n      icon: 'icofont-map bg-c-pink',\n      breadcrumb_caption: 'Lorem Ipsum Dolor Sit Amet, Consectetur Adipisicing Elit - Google Map',\n      status: true\n    }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GoogleMapRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GoogleMapRoutingModule } from './google-map-routing.module';\nimport { GoogleMapComponent } from './google-map.component';\nimport {SharedModule} from '../../../shared/shared.module';\nimport {AgmCoreModule} from '@agm/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    GoogleMapRoutingModule,\n    SharedModule,\n    AgmCoreModule.forRoot({apiKey: 'AIzaSyCE0nvTeHBsiQIrbpMVTe489_O5mwyqofk'})\n  ],\n  declarations: [GoogleMapComponent]\n})\nexport class GoogleMapModule { }\n","<div class=\"row\">\n  <div class=\"col-sm-6\">\n    <app-card [title]=\"'Basic Map'\" [classHeader]=\"true\">\n      <span class=\"code-header\">use property <code>latitude, longitude</code> with <code>agm-map</code> element</span>\n      <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\"></agm-map>\n    </app-card>\n  </div>\n  <div class=\"col-sm-6\">\n    <app-card [title]=\"'Markers Map'\" [classHeader]=\"true\">\n      <span class=\"code-header\">use element <code>agm-marker</code> with <code>agm-map</code> element</span>\n      <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"6\">\n        <agm-marker [latitude]=\"lat\" [longitude]=\"lng\"></agm-marker>\n        <agm-marker [latitude]=\"latA\" [longitude]=\"lngA\"></agm-marker>\n        <agm-marker [latitude]=\"21.6776887\" [longitude]=\"71.566261\"></agm-marker>\n        <agm-marker [latitude]=\"22.3220876\" [longitude]=\"73.1030464\"></agm-marker>\n        <agm-marker [latitude]=\"23.0201818\" [longitude]=\"72.4396587\"></agm-marker>\n        <agm-marker [latitude]=\"22.2734719\" [longitude]=\"70.7512565\"></agm-marker>\n      </agm-map>\n    </app-card>\n  </div>\n  <div class=\"col-sm-6\">\n    <app-card [title]=\"'Styled Map'\" [classHeader]=\"true\">\n      <span class=\"code-header\">use property <code>styles</code> with <code>agm-map</code> element</span>\n      <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\" [styles]=\"styles\"></agm-map>\n    </app-card>\n  </div>\n  <div class=\"col-sm-6\">\n    <app-card [title]=\"'Polylines'\" [classHeader]=\"true\">\n      <span class=\"code-header\">use property <code>styles</code> with <code>agm-map</code> element</span>\n      <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n        <agm-marker [latitude]=\"lat\" [longitude]=\"lng\"></agm-marker>\n        <agm-marker [latitude]=\"latA\" [longitude]=\"lngA\"></agm-marker>\n        <agm-polyline>\n          <agm-polyline-point [latitude]=\"lat\" [longitude]=\"lng\">\n          </agm-polyline-point>\n          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n          </agm-polyline-point>\n        </agm-polyline>\n      </agm-map>\n    </app-card>\n  </div>\n  <div class=\"col-sm-6\">\n    <app-card [title]=\"'Info Window'\" [classHeader]=\"true\">\n      <span class=\"code-header\">use property <code>styles</code> with <code>agm-map</code> element</span>\n      <agm-map [latitude]=\"21.6776887\" [longitude]=\"71.566261\" [zoom]=\"zoom\" [disableDefaultUI]=\"false\" [zoomControl]=\"false\">\n        <agm-marker [latitude]=\"21.6776887\" [longitude]=\"71.566261\">\n          <agm-info-window>Nice Place</agm-info-window>\n        </agm-marker>\n      </agm-map>\n    </app-card>\n  </div>\n  <div class=\"col-sm-6\">\n    <app-card [title]=\"'Circle'\" [classHeader]=\"true\">\n      <span class=\"code-header\">use property <code>styles</code> with <code>agm-map</code> element</span>\n      <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n        <agm-circle\n          [latitude]=\"lat + 0.3\"\n          [longitude]=\"lng\"\n          [radius]=\"50000\"\n          [fillColor]=\"'red'\"\n          [circleDraggable]=\"true\"\n          [editable]=\"true\"\n        >\n        </agm-circle>\n      </agm-map>\n    </app-card>\n  </div>\n</div>\n"]}